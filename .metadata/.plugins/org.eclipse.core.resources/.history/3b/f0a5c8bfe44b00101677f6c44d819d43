#include "stm32f4xx.h"


#define GPIOBEN		(1U<<1)
#define TIM2EN		(1U<<0)


/*timers pins
 * tim5-ch1 --> PA0 -->AF2
 * tim4-ch1 --> PB6 -->AF2
 * tim3-ch1 --> PB4 -->AF2
 * tim2-ch1 --> PB8 -->AF2*/
int main(void)
{


}

void timers_gpio_pins_init()
{
	//enable GPIOB clock
	RCC->AHB1ENR |= GPIOBEN;

	//configure pins mode to be alternative mode
	GPIOB->MODER &= ~(3U<<(2 * 8));
	GPIOB->MODER &= ~(3U<<(2 * 9));
	GPIOB->MODER &= ~(3U<<(2 * 10));
	GPIOB->MODER &= ~(3U<<(2 * 11));

	GPIOB->MODER |= ((2U<<(2*8))|(2U<<(2*9))|(2U<<(2*10))|(2U<<(2*11)));

	//configure AFR to be AF1 for timer2
	GPIOB->AFR[1] &= ~(0xF<<(4*0));
	GPIOB->AFR[1] &= ~(0xF<<(4*1));
	GPIOB->AFR[1] &= ~(0xF<<(4*2));
	GPIOB->AFR[1] &= ~(0xF<<(4*3));

	GPIOB->AFR[1] |= ((1U<<(4*0))|(1U<<(4*1))|(1U<<(4*2))|(1U<<(4*3)));

}

void tim2_output_compare_init(void)
{
	//enable tim2 clock
	RCC->APB1ENR |= TIM2EN;

	TIM2->PSC = 1600 - 1; // 16Mhz/1600 = 10Khz
	TIM2->ARR = 1000 - 1; // for 10hz output
	TIM2->CCR1= 5000;
	TIM2->CCMR1 &= ~(7U<<4);
	TIM2->CCMR1 |= (3U<<4);
	TIM2->CCMR1 |= (1U<<3);
	TIM2->CCER  |= (1U<<0);
	TIM2->CR1 	|= (1U<<0);
}

void tim3_output_compare_init(void)
{

}

void tim4_output_compare_init(void)
{

}
void tim5_output_compare_init(void)
{

}
