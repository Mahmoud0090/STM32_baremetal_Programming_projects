
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08000ea8  08000ea8  00001ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f04  08000f04  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000f04  08000f04  00001f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f0c  08000f0c  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00001f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f10  08000f10  00001f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000f14  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08000f64  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000f64  000021b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000072d  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b5  00000000  00000000  000027ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00002a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001992a  00000000  00000000  00002b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d9e  00000000  00000000  0001c481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f002  00000000  00000000  0001d21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000674  00000000  00000000  000ac264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000ac8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000e90 	.word	0x08000e90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	08000e90 	.word	0x08000e90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void adc1_init(void);
uint16_t adc1_read(void);


int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b092      	sub	sp, #72	@ 0x48
 80002b4:	af00      	add	r7, sp, #0
	char buffer[64];
	uint16_t adc_value;

	uart2_init();
 80002b6:	f000 f827 	bl	8000308 <uart2_init>
	adc1_init();
 80002ba:	f000 f895 	bl	80003e8 <adc1_init>

	uart2_print("Starting ADC read...\r\n");
 80002be:	480f      	ldr	r0, [pc, #60]	@ (80002fc <main+0x4c>)
 80002c0:	f000 f87c 	bl	80003bc <uart2_print>

	while(1)
	{
		adc_value = adc1_read();
 80002c4:	f000 f8d2 	bl	800046c <adc1_read>
 80002c8:	4603      	mov	r3, r0
 80002ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sprintf(buffer, "ADC Value: %u\r\n", adc_value);
 80002ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	490a      	ldr	r1, [pc, #40]	@ (8000300 <main+0x50>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f942 	bl	8000560 <siprintf>
		uart2_print(buffer);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f86c 	bl	80003bc <uart2_print>

		for (volatile int i = 0; i < 100000; i++); // delay
 80002e4:	2300      	movs	r3, #0
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	e002      	b.n	80002f0 <main+0x40>
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <main+0x54>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	ddf8      	ble.n	80002ea <main+0x3a>
		adc_value = adc1_read();
 80002f8:	e7e4      	b.n	80002c4 <main+0x14>
 80002fa:	bf00      	nop
 80002fc:	08000ea8 	.word	0x08000ea8
 8000300:	08000ec0 	.word	0x08000ec0
 8000304:	0001869f 	.word	0x0001869f

08000308 <uart2_init>:
	}
}

// === UART2 (PA2 - TX) ===
void uart2_init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	//enable GPIOA and USART2 clock
	RCC->AHB1ENR |= (1U<<0);
 800030c:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <uart2_init+0x78>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a1b      	ldr	r2, [pc, #108]	@ (8000380 <uart2_init+0x78>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= (1U<<17);
 8000318:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <uart2_init+0x78>)
 800031a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800031c:	4a18      	ldr	r2, [pc, #96]	@ (8000380 <uart2_init+0x78>)
 800031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000322:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure mode as alternate function
	GPIOA->MODER &= ~(3U<<(2*2));
 8000324:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <uart2_init+0x7c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <uart2_init+0x7c>)
 800032a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800032e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U<<(2*2));
 8000330:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <uart2_init+0x7c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a13      	ldr	r2, [pc, #76]	@ (8000384 <uart2_init+0x7c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6013      	str	r3, [r2, #0]

	//AF7 for PA2
	GPIOA->AFR[0] &= ~(0xF<<(4*2));
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <uart2_init+0x7c>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <uart2_init+0x7c>)
 8000342:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000346:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7U<<(4*2));
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <uart2_init+0x7c>)
 800034a:	6a1b      	ldr	r3, [r3, #32]
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <uart2_init+0x7c>)
 800034e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000352:	6213      	str	r3, [r2, #32]

	//configure uart2
	USART2->BRR = 0x0683; // 9600 baud @16MHz
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <uart2_init+0x80>)
 8000356:	f240 6283 	movw	r2, #1667	@ 0x683
 800035a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1U<<3); //Tx enable
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <uart2_init+0x80>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <uart2_init+0x80>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<13); //USART enable
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <uart2_init+0x80>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a06      	ldr	r2, [pc, #24]	@ (8000388 <uart2_init+0x80>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000
 8000388:	40004400 	.word	0x40004400

0800038c <uart2_write>:

void uart2_write(char c)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (1U<<7))); // wait for TXE bit
 8000396:	bf00      	nop
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <uart2_write+0x2c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <uart2_write+0xc>
	USART2->DR = c;
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <uart2_write+0x2c>)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	6053      	str	r3, [r2, #4]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40004400 	.word	0x40004400

080003bc <uart2_print>:

void uart2_print(const char* s)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	while(*s)
 80003c4:	e006      	b.n	80003d4 <uart2_print+0x18>
		uart2_write(*s++);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	1c5a      	adds	r2, r3, #1
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffdc 	bl	800038c <uart2_write>
	while(*s)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1f4      	bne.n	80003c6 <uart2_print+0xa>
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <adc1_init>:

// === ADC1 - PA1 (Channel 1) ===
void adc1_init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	// 1. Enable clock to GPIOA (if you're using PA1 for example)
	RCC->AHB1ENR |= (1U << 0);   // Enable GPIOA clock
 80003ec:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <adc1_init+0x74>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a1a      	ldr	r2, [pc, #104]	@ (800045c <adc1_init+0x74>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Set PA1 to Analog mode
	GPIOA->MODER |= (3U << (2 * 1)); // MODER1[1:0] = 11 => Analog mode
 80003f8:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <adc1_init+0x78>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a18      	ldr	r2, [pc, #96]	@ (8000460 <adc1_init+0x78>)
 80003fe:	f043 030c 	orr.w	r3, r3, #12
 8000402:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U << (2 * 1)); // No pull-up or pull-down
 8000404:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <adc1_init+0x78>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a15      	ldr	r2, [pc, #84]	@ (8000460 <adc1_init+0x78>)
 800040a:	f023 030c 	bic.w	r3, r3, #12
 800040e:	60d3      	str	r3, [r2, #12]

	// 3. Enable ADC1 clock
	RCC->APB2ENR |= (1U << 8); // Enable ADC1 clock
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <adc1_init+0x74>)
 8000412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000414:	4a11      	ldr	r2, [pc, #68]	@ (800045c <adc1_init+0x74>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800041a:	6453      	str	r3, [r2, #68]	@ 0x44

	// 4. Set ADC prescaler in ADC Common Control Register
	ADC->CCR |= (1U << 16); // PCLK2 divided by 4 (optional tuning)
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <adc1_init+0x7c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a10      	ldr	r2, [pc, #64]	@ (8000464 <adc1_init+0x7c>)
 8000422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000426:	6053      	str	r3, [r2, #4]

	// 5. Set ADC resolution (optional, default is 12-bit)
	ADC1->CR1 &= ~(3U << 24); // 00: 12-bit resolution
 8000428:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <adc1_init+0x80>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <adc1_init+0x80>)
 800042e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000432:	6053      	str	r3, [r2, #4]

	// 6. Configure conversion sequence
	ADC1->SQR3 = 1; // Channel 1 as 1st conversion (PA1 = ADC1_IN1)
 8000434:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <adc1_init+0x80>)
 8000436:	2201      	movs	r2, #1
 8000438:	635a      	str	r2, [r3, #52]	@ 0x34

	// 7. Set sample time
	ADC1->SMPR2 |= (3U << 3); // 56 cycles for channel 1 (bits 5:3)
 800043a:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <adc1_init+0x80>)
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <adc1_init+0x80>)
 8000440:	f043 0318 	orr.w	r3, r3, #24
 8000444:	6113      	str	r3, [r2, #16]

	// 8. Enable ADC
	ADC1->CR2 |= (1U << 0); // ADON = 1 => enable ADC
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <adc1_init+0x80>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <adc1_init+0x80>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6093      	str	r3, [r2, #8]
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	40023800 	.word	0x40023800
 8000460:	40020000 	.word	0x40020000
 8000464:	40012300 	.word	0x40012300
 8000468:	40012000 	.word	0x40012000

0800046c <adc1_read>:

uint16_t adc1_read(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (1U << 30); // Start conversion (SWSTART)
 8000470:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <adc1_read+0x30>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a09      	ldr	r2, [pc, #36]	@ (800049c <adc1_read+0x30>)
 8000476:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800047a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & (1U << 1))); // Wait for EOC
 800047c:	bf00      	nop
 800047e:	4b07      	ldr	r3, [pc, #28]	@ (800049c <adc1_read+0x30>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <adc1_read+0x12>
	return (uint16_t)ADC1->DR;
 800048a:	4b04      	ldr	r3, [pc, #16]	@ (800049c <adc1_read+0x30>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	b29b      	uxth	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40012000 	.word	0x40012000

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f000 f866 	bl	80005a0 <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20020000 	.word	0x20020000
 8000500:	00000400 	.word	0x00000400
 8000504:	2000006c 	.word	0x2000006c
 8000508:	200001b8 	.word	0x200001b8

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f000 f837 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff feb7 	bl	80002b0 <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000550:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 8000554:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000558:	200001b8 	.word	0x200001b8

0800055c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <siprintf>:
 8000560:	b40e      	push	{r1, r2, r3}
 8000562:	b500      	push	{lr}
 8000564:	b09c      	sub	sp, #112	@ 0x70
 8000566:	ab1d      	add	r3, sp, #116	@ 0x74
 8000568:	9002      	str	r0, [sp, #8]
 800056a:	9006      	str	r0, [sp, #24]
 800056c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000570:	4809      	ldr	r0, [pc, #36]	@ (8000598 <siprintf+0x38>)
 8000572:	9107      	str	r1, [sp, #28]
 8000574:	9104      	str	r1, [sp, #16]
 8000576:	4909      	ldr	r1, [pc, #36]	@ (800059c <siprintf+0x3c>)
 8000578:	f853 2b04 	ldr.w	r2, [r3], #4
 800057c:	9105      	str	r1, [sp, #20]
 800057e:	6800      	ldr	r0, [r0, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	a902      	add	r1, sp, #8
 8000584:	f000 f98c 	bl	80008a0 <_svfiprintf_r>
 8000588:	9b02      	ldr	r3, [sp, #8]
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	b01c      	add	sp, #112	@ 0x70
 8000590:	f85d eb04 	ldr.w	lr, [sp], #4
 8000594:	b003      	add	sp, #12
 8000596:	4770      	bx	lr
 8000598:	20000000 	.word	0x20000000
 800059c:	ffff0208 	.word	0xffff0208

080005a0 <__errno>:
 80005a0:	4b01      	ldr	r3, [pc, #4]	@ (80005a8 <__errno+0x8>)
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	@ (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	@ (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	@ (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	@ (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 fc66 	bl	8000e90 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	08000f0c 	.word	0x08000f0c
 80005e8:	08000f0c 	.word	0x08000f0c
 80005ec:	08000f0c 	.word	0x08000f0c
 80005f0:	08000f10 	.word	0x08000f10

080005f4 <__retarget_lock_acquire_recursive>:
 80005f4:	4770      	bx	lr

080005f6 <__retarget_lock_release_recursive>:
 80005f6:	4770      	bx	lr

080005f8 <_free_r>:
 80005f8:	b538      	push	{r3, r4, r5, lr}
 80005fa:	4605      	mov	r5, r0
 80005fc:	2900      	cmp	r1, #0
 80005fe:	d041      	beq.n	8000684 <_free_r+0x8c>
 8000600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000604:	1f0c      	subs	r4, r1, #4
 8000606:	2b00      	cmp	r3, #0
 8000608:	bfb8      	it	lt
 800060a:	18e4      	addlt	r4, r4, r3
 800060c:	f000 f8e0 	bl	80007d0 <__malloc_lock>
 8000610:	4a1d      	ldr	r2, [pc, #116]	@ (8000688 <_free_r+0x90>)
 8000612:	6813      	ldr	r3, [r2, #0]
 8000614:	b933      	cbnz	r3, 8000624 <_free_r+0x2c>
 8000616:	6063      	str	r3, [r4, #4]
 8000618:	6014      	str	r4, [r2, #0]
 800061a:	4628      	mov	r0, r5
 800061c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000620:	f000 b8dc 	b.w	80007dc <__malloc_unlock>
 8000624:	42a3      	cmp	r3, r4
 8000626:	d908      	bls.n	800063a <_free_r+0x42>
 8000628:	6820      	ldr	r0, [r4, #0]
 800062a:	1821      	adds	r1, r4, r0
 800062c:	428b      	cmp	r3, r1
 800062e:	bf01      	itttt	eq
 8000630:	6819      	ldreq	r1, [r3, #0]
 8000632:	685b      	ldreq	r3, [r3, #4]
 8000634:	1809      	addeq	r1, r1, r0
 8000636:	6021      	streq	r1, [r4, #0]
 8000638:	e7ed      	b.n	8000616 <_free_r+0x1e>
 800063a:	461a      	mov	r2, r3
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	b10b      	cbz	r3, 8000644 <_free_r+0x4c>
 8000640:	42a3      	cmp	r3, r4
 8000642:	d9fa      	bls.n	800063a <_free_r+0x42>
 8000644:	6811      	ldr	r1, [r2, #0]
 8000646:	1850      	adds	r0, r2, r1
 8000648:	42a0      	cmp	r0, r4
 800064a:	d10b      	bne.n	8000664 <_free_r+0x6c>
 800064c:	6820      	ldr	r0, [r4, #0]
 800064e:	4401      	add	r1, r0
 8000650:	1850      	adds	r0, r2, r1
 8000652:	4283      	cmp	r3, r0
 8000654:	6011      	str	r1, [r2, #0]
 8000656:	d1e0      	bne.n	800061a <_free_r+0x22>
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	6053      	str	r3, [r2, #4]
 800065e:	4408      	add	r0, r1
 8000660:	6010      	str	r0, [r2, #0]
 8000662:	e7da      	b.n	800061a <_free_r+0x22>
 8000664:	d902      	bls.n	800066c <_free_r+0x74>
 8000666:	230c      	movs	r3, #12
 8000668:	602b      	str	r3, [r5, #0]
 800066a:	e7d6      	b.n	800061a <_free_r+0x22>
 800066c:	6820      	ldr	r0, [r4, #0]
 800066e:	1821      	adds	r1, r4, r0
 8000670:	428b      	cmp	r3, r1
 8000672:	bf04      	itt	eq
 8000674:	6819      	ldreq	r1, [r3, #0]
 8000676:	685b      	ldreq	r3, [r3, #4]
 8000678:	6063      	str	r3, [r4, #4]
 800067a:	bf04      	itt	eq
 800067c:	1809      	addeq	r1, r1, r0
 800067e:	6021      	streq	r1, [r4, #0]
 8000680:	6054      	str	r4, [r2, #4]
 8000682:	e7ca      	b.n	800061a <_free_r+0x22>
 8000684:	bd38      	pop	{r3, r4, r5, pc}
 8000686:	bf00      	nop
 8000688:	200001b4 	.word	0x200001b4

0800068c <sbrk_aligned>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4e0f      	ldr	r6, [pc, #60]	@ (80006cc <sbrk_aligned+0x40>)
 8000690:	460c      	mov	r4, r1
 8000692:	6831      	ldr	r1, [r6, #0]
 8000694:	4605      	mov	r5, r0
 8000696:	b911      	cbnz	r1, 800069e <sbrk_aligned+0x12>
 8000698:	f000 fba6 	bl	8000de8 <_sbrk_r>
 800069c:	6030      	str	r0, [r6, #0]
 800069e:	4621      	mov	r1, r4
 80006a0:	4628      	mov	r0, r5
 80006a2:	f000 fba1 	bl	8000de8 <_sbrk_r>
 80006a6:	1c43      	adds	r3, r0, #1
 80006a8:	d103      	bne.n	80006b2 <sbrk_aligned+0x26>
 80006aa:	f04f 34ff 	mov.w	r4, #4294967295
 80006ae:	4620      	mov	r0, r4
 80006b0:	bd70      	pop	{r4, r5, r6, pc}
 80006b2:	1cc4      	adds	r4, r0, #3
 80006b4:	f024 0403 	bic.w	r4, r4, #3
 80006b8:	42a0      	cmp	r0, r4
 80006ba:	d0f8      	beq.n	80006ae <sbrk_aligned+0x22>
 80006bc:	1a21      	subs	r1, r4, r0
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 fb92 	bl	8000de8 <_sbrk_r>
 80006c4:	3001      	adds	r0, #1
 80006c6:	d1f2      	bne.n	80006ae <sbrk_aligned+0x22>
 80006c8:	e7ef      	b.n	80006aa <sbrk_aligned+0x1e>
 80006ca:	bf00      	nop
 80006cc:	200001b0 	.word	0x200001b0

080006d0 <_malloc_r>:
 80006d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006d4:	1ccd      	adds	r5, r1, #3
 80006d6:	f025 0503 	bic.w	r5, r5, #3
 80006da:	3508      	adds	r5, #8
 80006dc:	2d0c      	cmp	r5, #12
 80006de:	bf38      	it	cc
 80006e0:	250c      	movcc	r5, #12
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	4606      	mov	r6, r0
 80006e6:	db01      	blt.n	80006ec <_malloc_r+0x1c>
 80006e8:	42a9      	cmp	r1, r5
 80006ea:	d904      	bls.n	80006f6 <_malloc_r+0x26>
 80006ec:	230c      	movs	r3, #12
 80006ee:	6033      	str	r3, [r6, #0]
 80006f0:	2000      	movs	r0, #0
 80006f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80007cc <_malloc_r+0xfc>
 80006fa:	f000 f869 	bl	80007d0 <__malloc_lock>
 80006fe:	f8d8 3000 	ldr.w	r3, [r8]
 8000702:	461c      	mov	r4, r3
 8000704:	bb44      	cbnz	r4, 8000758 <_malloc_r+0x88>
 8000706:	4629      	mov	r1, r5
 8000708:	4630      	mov	r0, r6
 800070a:	f7ff ffbf 	bl	800068c <sbrk_aligned>
 800070e:	1c43      	adds	r3, r0, #1
 8000710:	4604      	mov	r4, r0
 8000712:	d158      	bne.n	80007c6 <_malloc_r+0xf6>
 8000714:	f8d8 4000 	ldr.w	r4, [r8]
 8000718:	4627      	mov	r7, r4
 800071a:	2f00      	cmp	r7, #0
 800071c:	d143      	bne.n	80007a6 <_malloc_r+0xd6>
 800071e:	2c00      	cmp	r4, #0
 8000720:	d04b      	beq.n	80007ba <_malloc_r+0xea>
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	4639      	mov	r1, r7
 8000726:	4630      	mov	r0, r6
 8000728:	eb04 0903 	add.w	r9, r4, r3
 800072c:	f000 fb5c 	bl	8000de8 <_sbrk_r>
 8000730:	4581      	cmp	r9, r0
 8000732:	d142      	bne.n	80007ba <_malloc_r+0xea>
 8000734:	6821      	ldr	r1, [r4, #0]
 8000736:	1a6d      	subs	r5, r5, r1
 8000738:	4629      	mov	r1, r5
 800073a:	4630      	mov	r0, r6
 800073c:	f7ff ffa6 	bl	800068c <sbrk_aligned>
 8000740:	3001      	adds	r0, #1
 8000742:	d03a      	beq.n	80007ba <_malloc_r+0xea>
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	442b      	add	r3, r5
 8000748:	6023      	str	r3, [r4, #0]
 800074a:	f8d8 3000 	ldr.w	r3, [r8]
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	bb62      	cbnz	r2, 80007ac <_malloc_r+0xdc>
 8000752:	f8c8 7000 	str.w	r7, [r8]
 8000756:	e00f      	b.n	8000778 <_malloc_r+0xa8>
 8000758:	6822      	ldr	r2, [r4, #0]
 800075a:	1b52      	subs	r2, r2, r5
 800075c:	d420      	bmi.n	80007a0 <_malloc_r+0xd0>
 800075e:	2a0b      	cmp	r2, #11
 8000760:	d917      	bls.n	8000792 <_malloc_r+0xc2>
 8000762:	1961      	adds	r1, r4, r5
 8000764:	42a3      	cmp	r3, r4
 8000766:	6025      	str	r5, [r4, #0]
 8000768:	bf18      	it	ne
 800076a:	6059      	strne	r1, [r3, #4]
 800076c:	6863      	ldr	r3, [r4, #4]
 800076e:	bf08      	it	eq
 8000770:	f8c8 1000 	streq.w	r1, [r8]
 8000774:	5162      	str	r2, [r4, r5]
 8000776:	604b      	str	r3, [r1, #4]
 8000778:	4630      	mov	r0, r6
 800077a:	f000 f82f 	bl	80007dc <__malloc_unlock>
 800077e:	f104 000b 	add.w	r0, r4, #11
 8000782:	1d23      	adds	r3, r4, #4
 8000784:	f020 0007 	bic.w	r0, r0, #7
 8000788:	1ac2      	subs	r2, r0, r3
 800078a:	bf1c      	itt	ne
 800078c:	1a1b      	subne	r3, r3, r0
 800078e:	50a3      	strne	r3, [r4, r2]
 8000790:	e7af      	b.n	80006f2 <_malloc_r+0x22>
 8000792:	6862      	ldr	r2, [r4, #4]
 8000794:	42a3      	cmp	r3, r4
 8000796:	bf0c      	ite	eq
 8000798:	f8c8 2000 	streq.w	r2, [r8]
 800079c:	605a      	strne	r2, [r3, #4]
 800079e:	e7eb      	b.n	8000778 <_malloc_r+0xa8>
 80007a0:	4623      	mov	r3, r4
 80007a2:	6864      	ldr	r4, [r4, #4]
 80007a4:	e7ae      	b.n	8000704 <_malloc_r+0x34>
 80007a6:	463c      	mov	r4, r7
 80007a8:	687f      	ldr	r7, [r7, #4]
 80007aa:	e7b6      	b.n	800071a <_malloc_r+0x4a>
 80007ac:	461a      	mov	r2, r3
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	42a3      	cmp	r3, r4
 80007b2:	d1fb      	bne.n	80007ac <_malloc_r+0xdc>
 80007b4:	2300      	movs	r3, #0
 80007b6:	6053      	str	r3, [r2, #4]
 80007b8:	e7de      	b.n	8000778 <_malloc_r+0xa8>
 80007ba:	230c      	movs	r3, #12
 80007bc:	6033      	str	r3, [r6, #0]
 80007be:	4630      	mov	r0, r6
 80007c0:	f000 f80c 	bl	80007dc <__malloc_unlock>
 80007c4:	e794      	b.n	80006f0 <_malloc_r+0x20>
 80007c6:	6005      	str	r5, [r0, #0]
 80007c8:	e7d6      	b.n	8000778 <_malloc_r+0xa8>
 80007ca:	bf00      	nop
 80007cc:	200001b4 	.word	0x200001b4

080007d0 <__malloc_lock>:
 80007d0:	4801      	ldr	r0, [pc, #4]	@ (80007d8 <__malloc_lock+0x8>)
 80007d2:	f7ff bf0f 	b.w	80005f4 <__retarget_lock_acquire_recursive>
 80007d6:	bf00      	nop
 80007d8:	200001ac 	.word	0x200001ac

080007dc <__malloc_unlock>:
 80007dc:	4801      	ldr	r0, [pc, #4]	@ (80007e4 <__malloc_unlock+0x8>)
 80007de:	f7ff bf0a 	b.w	80005f6 <__retarget_lock_release_recursive>
 80007e2:	bf00      	nop
 80007e4:	200001ac 	.word	0x200001ac

080007e8 <__ssputs_r>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	688e      	ldr	r6, [r1, #8]
 80007ee:	461f      	mov	r7, r3
 80007f0:	42be      	cmp	r6, r7
 80007f2:	680b      	ldr	r3, [r1, #0]
 80007f4:	4682      	mov	sl, r0
 80007f6:	460c      	mov	r4, r1
 80007f8:	4690      	mov	r8, r2
 80007fa:	d82d      	bhi.n	8000858 <__ssputs_r+0x70>
 80007fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000804:	d026      	beq.n	8000854 <__ssputs_r+0x6c>
 8000806:	6965      	ldr	r5, [r4, #20]
 8000808:	6909      	ldr	r1, [r1, #16]
 800080a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800080e:	eba3 0901 	sub.w	r9, r3, r1
 8000812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000816:	1c7b      	adds	r3, r7, #1
 8000818:	444b      	add	r3, r9
 800081a:	106d      	asrs	r5, r5, #1
 800081c:	429d      	cmp	r5, r3
 800081e:	bf38      	it	cc
 8000820:	461d      	movcc	r5, r3
 8000822:	0553      	lsls	r3, r2, #21
 8000824:	d527      	bpl.n	8000876 <__ssputs_r+0x8e>
 8000826:	4629      	mov	r1, r5
 8000828:	f7ff ff52 	bl	80006d0 <_malloc_r>
 800082c:	4606      	mov	r6, r0
 800082e:	b360      	cbz	r0, 800088a <__ssputs_r+0xa2>
 8000830:	6921      	ldr	r1, [r4, #16]
 8000832:	464a      	mov	r2, r9
 8000834:	f000 fae8 	bl	8000e08 <memcpy>
 8000838:	89a3      	ldrh	r3, [r4, #12]
 800083a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800083e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000842:	81a3      	strh	r3, [r4, #12]
 8000844:	6126      	str	r6, [r4, #16]
 8000846:	6165      	str	r5, [r4, #20]
 8000848:	444e      	add	r6, r9
 800084a:	eba5 0509 	sub.w	r5, r5, r9
 800084e:	6026      	str	r6, [r4, #0]
 8000850:	60a5      	str	r5, [r4, #8]
 8000852:	463e      	mov	r6, r7
 8000854:	42be      	cmp	r6, r7
 8000856:	d900      	bls.n	800085a <__ssputs_r+0x72>
 8000858:	463e      	mov	r6, r7
 800085a:	6820      	ldr	r0, [r4, #0]
 800085c:	4632      	mov	r2, r6
 800085e:	4641      	mov	r1, r8
 8000860:	f000 faa8 	bl	8000db4 <memmove>
 8000864:	68a3      	ldr	r3, [r4, #8]
 8000866:	1b9b      	subs	r3, r3, r6
 8000868:	60a3      	str	r3, [r4, #8]
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	4433      	add	r3, r6
 800086e:	6023      	str	r3, [r4, #0]
 8000870:	2000      	movs	r0, #0
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	462a      	mov	r2, r5
 8000878:	f000 fad4 	bl	8000e24 <_realloc_r>
 800087c:	4606      	mov	r6, r0
 800087e:	2800      	cmp	r0, #0
 8000880:	d1e0      	bne.n	8000844 <__ssputs_r+0x5c>
 8000882:	6921      	ldr	r1, [r4, #16]
 8000884:	4650      	mov	r0, sl
 8000886:	f7ff feb7 	bl	80005f8 <_free_r>
 800088a:	230c      	movs	r3, #12
 800088c:	f8ca 3000 	str.w	r3, [sl]
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000896:	81a3      	strh	r3, [r4, #12]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	e7e9      	b.n	8000872 <__ssputs_r+0x8a>
	...

080008a0 <_svfiprintf_r>:
 80008a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008a4:	4698      	mov	r8, r3
 80008a6:	898b      	ldrh	r3, [r1, #12]
 80008a8:	061b      	lsls	r3, r3, #24
 80008aa:	b09d      	sub	sp, #116	@ 0x74
 80008ac:	4607      	mov	r7, r0
 80008ae:	460d      	mov	r5, r1
 80008b0:	4614      	mov	r4, r2
 80008b2:	d510      	bpl.n	80008d6 <_svfiprintf_r+0x36>
 80008b4:	690b      	ldr	r3, [r1, #16]
 80008b6:	b973      	cbnz	r3, 80008d6 <_svfiprintf_r+0x36>
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	f7ff ff09 	bl	80006d0 <_malloc_r>
 80008be:	6028      	str	r0, [r5, #0]
 80008c0:	6128      	str	r0, [r5, #16]
 80008c2:	b930      	cbnz	r0, 80008d2 <_svfiprintf_r+0x32>
 80008c4:	230c      	movs	r3, #12
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	b01d      	add	sp, #116	@ 0x74
 80008ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	616b      	str	r3, [r5, #20]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80008da:	2320      	movs	r3, #32
 80008dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80008e4:	2330      	movs	r3, #48	@ 0x30
 80008e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a84 <_svfiprintf_r+0x1e4>
 80008ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80008ee:	f04f 0901 	mov.w	r9, #1
 80008f2:	4623      	mov	r3, r4
 80008f4:	469a      	mov	sl, r3
 80008f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008fa:	b10a      	cbz	r2, 8000900 <_svfiprintf_r+0x60>
 80008fc:	2a25      	cmp	r2, #37	@ 0x25
 80008fe:	d1f9      	bne.n	80008f4 <_svfiprintf_r+0x54>
 8000900:	ebba 0b04 	subs.w	fp, sl, r4
 8000904:	d00b      	beq.n	800091e <_svfiprintf_r+0x7e>
 8000906:	465b      	mov	r3, fp
 8000908:	4622      	mov	r2, r4
 800090a:	4629      	mov	r1, r5
 800090c:	4638      	mov	r0, r7
 800090e:	f7ff ff6b 	bl	80007e8 <__ssputs_r>
 8000912:	3001      	adds	r0, #1
 8000914:	f000 80a7 	beq.w	8000a66 <_svfiprintf_r+0x1c6>
 8000918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800091a:	445a      	add	r2, fp
 800091c:	9209      	str	r2, [sp, #36]	@ 0x24
 800091e:	f89a 3000 	ldrb.w	r3, [sl]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 809f 	beq.w	8000a66 <_svfiprintf_r+0x1c6>
 8000928:	2300      	movs	r3, #0
 800092a:	f04f 32ff 	mov.w	r2, #4294967295
 800092e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000932:	f10a 0a01 	add.w	sl, sl, #1
 8000936:	9304      	str	r3, [sp, #16]
 8000938:	9307      	str	r3, [sp, #28]
 800093a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800093e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000940:	4654      	mov	r4, sl
 8000942:	2205      	movs	r2, #5
 8000944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000948:	484e      	ldr	r0, [pc, #312]	@ (8000a84 <_svfiprintf_r+0x1e4>)
 800094a:	f7ff fc61 	bl	8000210 <memchr>
 800094e:	9a04      	ldr	r2, [sp, #16]
 8000950:	b9d8      	cbnz	r0, 800098a <_svfiprintf_r+0xea>
 8000952:	06d0      	lsls	r0, r2, #27
 8000954:	bf44      	itt	mi
 8000956:	2320      	movmi	r3, #32
 8000958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800095c:	0711      	lsls	r1, r2, #28
 800095e:	bf44      	itt	mi
 8000960:	232b      	movmi	r3, #43	@ 0x2b
 8000962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000966:	f89a 3000 	ldrb.w	r3, [sl]
 800096a:	2b2a      	cmp	r3, #42	@ 0x2a
 800096c:	d015      	beq.n	800099a <_svfiprintf_r+0xfa>
 800096e:	9a07      	ldr	r2, [sp, #28]
 8000970:	4654      	mov	r4, sl
 8000972:	2000      	movs	r0, #0
 8000974:	f04f 0c0a 	mov.w	ip, #10
 8000978:	4621      	mov	r1, r4
 800097a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800097e:	3b30      	subs	r3, #48	@ 0x30
 8000980:	2b09      	cmp	r3, #9
 8000982:	d94b      	bls.n	8000a1c <_svfiprintf_r+0x17c>
 8000984:	b1b0      	cbz	r0, 80009b4 <_svfiprintf_r+0x114>
 8000986:	9207      	str	r2, [sp, #28]
 8000988:	e014      	b.n	80009b4 <_svfiprintf_r+0x114>
 800098a:	eba0 0308 	sub.w	r3, r0, r8
 800098e:	fa09 f303 	lsl.w	r3, r9, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	46a2      	mov	sl, r4
 8000998:	e7d2      	b.n	8000940 <_svfiprintf_r+0xa0>
 800099a:	9b03      	ldr	r3, [sp, #12]
 800099c:	1d19      	adds	r1, r3, #4
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	9103      	str	r1, [sp, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bfbb      	ittet	lt
 80009a6:	425b      	neglt	r3, r3
 80009a8:	f042 0202 	orrlt.w	r2, r2, #2
 80009ac:	9307      	strge	r3, [sp, #28]
 80009ae:	9307      	strlt	r3, [sp, #28]
 80009b0:	bfb8      	it	lt
 80009b2:	9204      	strlt	r2, [sp, #16]
 80009b4:	7823      	ldrb	r3, [r4, #0]
 80009b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80009b8:	d10a      	bne.n	80009d0 <_svfiprintf_r+0x130>
 80009ba:	7863      	ldrb	r3, [r4, #1]
 80009bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80009be:	d132      	bne.n	8000a26 <_svfiprintf_r+0x186>
 80009c0:	9b03      	ldr	r3, [sp, #12]
 80009c2:	1d1a      	adds	r2, r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	9203      	str	r2, [sp, #12]
 80009c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009cc:	3402      	adds	r4, #2
 80009ce:	9305      	str	r3, [sp, #20]
 80009d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000a94 <_svfiprintf_r+0x1f4>
 80009d4:	7821      	ldrb	r1, [r4, #0]
 80009d6:	2203      	movs	r2, #3
 80009d8:	4650      	mov	r0, sl
 80009da:	f7ff fc19 	bl	8000210 <memchr>
 80009de:	b138      	cbz	r0, 80009f0 <_svfiprintf_r+0x150>
 80009e0:	9b04      	ldr	r3, [sp, #16]
 80009e2:	eba0 000a 	sub.w	r0, r0, sl
 80009e6:	2240      	movs	r2, #64	@ 0x40
 80009e8:	4082      	lsls	r2, r0
 80009ea:	4313      	orrs	r3, r2
 80009ec:	3401      	adds	r4, #1
 80009ee:	9304      	str	r3, [sp, #16]
 80009f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f4:	4824      	ldr	r0, [pc, #144]	@ (8000a88 <_svfiprintf_r+0x1e8>)
 80009f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80009fa:	2206      	movs	r2, #6
 80009fc:	f7ff fc08 	bl	8000210 <memchr>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d036      	beq.n	8000a72 <_svfiprintf_r+0x1d2>
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <_svfiprintf_r+0x1ec>)
 8000a06:	bb1b      	cbnz	r3, 8000a50 <_svfiprintf_r+0x1b0>
 8000a08:	9b03      	ldr	r3, [sp, #12]
 8000a0a:	3307      	adds	r3, #7
 8000a0c:	f023 0307 	bic.w	r3, r3, #7
 8000a10:	3308      	adds	r3, #8
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a16:	4433      	add	r3, r6
 8000a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a1a:	e76a      	b.n	80008f2 <_svfiprintf_r+0x52>
 8000a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a20:	460c      	mov	r4, r1
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7a8      	b.n	8000978 <_svfiprintf_r+0xd8>
 8000a26:	2300      	movs	r3, #0
 8000a28:	3401      	adds	r4, #1
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 0c0a 	mov.w	ip, #10
 8000a32:	4620      	mov	r0, r4
 8000a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a38:	3a30      	subs	r2, #48	@ 0x30
 8000a3a:	2a09      	cmp	r2, #9
 8000a3c:	d903      	bls.n	8000a46 <_svfiprintf_r+0x1a6>
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0c6      	beq.n	80009d0 <_svfiprintf_r+0x130>
 8000a42:	9105      	str	r1, [sp, #20]
 8000a44:	e7c4      	b.n	80009d0 <_svfiprintf_r+0x130>
 8000a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e7f0      	b.n	8000a32 <_svfiprintf_r+0x192>
 8000a50:	ab03      	add	r3, sp, #12
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	462a      	mov	r2, r5
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <_svfiprintf_r+0x1f0>)
 8000a58:	a904      	add	r1, sp, #16
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f3af 8000 	nop.w
 8000a60:	1c42      	adds	r2, r0, #1
 8000a62:	4606      	mov	r6, r0
 8000a64:	d1d6      	bne.n	8000a14 <_svfiprintf_r+0x174>
 8000a66:	89ab      	ldrh	r3, [r5, #12]
 8000a68:	065b      	lsls	r3, r3, #25
 8000a6a:	f53f af2d 	bmi.w	80008c8 <_svfiprintf_r+0x28>
 8000a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a70:	e72c      	b.n	80008cc <_svfiprintf_r+0x2c>
 8000a72:	ab03      	add	r3, sp, #12
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	462a      	mov	r2, r5
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <_svfiprintf_r+0x1f0>)
 8000a7a:	a904      	add	r1, sp, #16
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f000 f879 	bl	8000b74 <_printf_i>
 8000a82:	e7ed      	b.n	8000a60 <_svfiprintf_r+0x1c0>
 8000a84:	08000ed0 	.word	0x08000ed0
 8000a88:	08000eda 	.word	0x08000eda
 8000a8c:	00000000 	.word	0x00000000
 8000a90:	080007e9 	.word	0x080007e9
 8000a94:	08000ed6 	.word	0x08000ed6

08000a98 <_printf_common>:
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a9c:	4616      	mov	r6, r2
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	688a      	ldr	r2, [r1, #8]
 8000aa2:	690b      	ldr	r3, [r1, #16]
 8000aa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	bfb8      	it	lt
 8000aac:	4613      	movlt	r3, r2
 8000aae:	6033      	str	r3, [r6, #0]
 8000ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ab4:	4607      	mov	r7, r0
 8000ab6:	460c      	mov	r4, r1
 8000ab8:	b10a      	cbz	r2, 8000abe <_printf_common+0x26>
 8000aba:	3301      	adds	r3, #1
 8000abc:	6033      	str	r3, [r6, #0]
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	0699      	lsls	r1, r3, #26
 8000ac2:	bf42      	ittt	mi
 8000ac4:	6833      	ldrmi	r3, [r6, #0]
 8000ac6:	3302      	addmi	r3, #2
 8000ac8:	6033      	strmi	r3, [r6, #0]
 8000aca:	6825      	ldr	r5, [r4, #0]
 8000acc:	f015 0506 	ands.w	r5, r5, #6
 8000ad0:	d106      	bne.n	8000ae0 <_printf_common+0x48>
 8000ad2:	f104 0a19 	add.w	sl, r4, #25
 8000ad6:	68e3      	ldr	r3, [r4, #12]
 8000ad8:	6832      	ldr	r2, [r6, #0]
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	42ab      	cmp	r3, r5
 8000ade:	dc26      	bgt.n	8000b2e <_printf_common+0x96>
 8000ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	3b00      	subs	r3, #0
 8000ae8:	bf18      	it	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	0692      	lsls	r2, r2, #26
 8000aee:	d42b      	bmi.n	8000b48 <_printf_common+0xb0>
 8000af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000af4:	4641      	mov	r1, r8
 8000af6:	4638      	mov	r0, r7
 8000af8:	47c8      	blx	r9
 8000afa:	3001      	adds	r0, #1
 8000afc:	d01e      	beq.n	8000b3c <_printf_common+0xa4>
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	6922      	ldr	r2, [r4, #16]
 8000b02:	f003 0306 	and.w	r3, r3, #6
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf02      	ittt	eq
 8000b0a:	68e5      	ldreq	r5, [r4, #12]
 8000b0c:	6833      	ldreq	r3, [r6, #0]
 8000b0e:	1aed      	subeq	r5, r5, r3
 8000b10:	68a3      	ldr	r3, [r4, #8]
 8000b12:	bf0c      	ite	eq
 8000b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b18:	2500      	movne	r5, #0
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	bfc4      	itt	gt
 8000b1e:	1a9b      	subgt	r3, r3, r2
 8000b20:	18ed      	addgt	r5, r5, r3
 8000b22:	2600      	movs	r6, #0
 8000b24:	341a      	adds	r4, #26
 8000b26:	42b5      	cmp	r5, r6
 8000b28:	d11a      	bne.n	8000b60 <_printf_common+0xc8>
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e008      	b.n	8000b40 <_printf_common+0xa8>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	4652      	mov	r2, sl
 8000b32:	4641      	mov	r1, r8
 8000b34:	4638      	mov	r0, r7
 8000b36:	47c8      	blx	r9
 8000b38:	3001      	adds	r0, #1
 8000b3a:	d103      	bne.n	8000b44 <_printf_common+0xac>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b44:	3501      	adds	r5, #1
 8000b46:	e7c6      	b.n	8000ad6 <_printf_common+0x3e>
 8000b48:	18e1      	adds	r1, r4, r3
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	2030      	movs	r0, #48	@ 0x30
 8000b4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000b52:	4422      	add	r2, r4
 8000b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	e7c7      	b.n	8000af0 <_printf_common+0x58>
 8000b60:	2301      	movs	r3, #1
 8000b62:	4622      	mov	r2, r4
 8000b64:	4641      	mov	r1, r8
 8000b66:	4638      	mov	r0, r7
 8000b68:	47c8      	blx	r9
 8000b6a:	3001      	adds	r0, #1
 8000b6c:	d0e6      	beq.n	8000b3c <_printf_common+0xa4>
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7d9      	b.n	8000b26 <_printf_common+0x8e>
	...

08000b74 <_printf_i>:
 8000b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	7e0f      	ldrb	r7, [r1, #24]
 8000b7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000b7c:	2f78      	cmp	r7, #120	@ 0x78
 8000b7e:	4691      	mov	r9, r2
 8000b80:	4680      	mov	r8, r0
 8000b82:	460c      	mov	r4, r1
 8000b84:	469a      	mov	sl, r3
 8000b86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000b8a:	d807      	bhi.n	8000b9c <_printf_i+0x28>
 8000b8c:	2f62      	cmp	r7, #98	@ 0x62
 8000b8e:	d80a      	bhi.n	8000ba6 <_printf_i+0x32>
 8000b90:	2f00      	cmp	r7, #0
 8000b92:	f000 80d2 	beq.w	8000d3a <_printf_i+0x1c6>
 8000b96:	2f58      	cmp	r7, #88	@ 0x58
 8000b98:	f000 80b9 	beq.w	8000d0e <_printf_i+0x19a>
 8000b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ba0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ba4:	e03a      	b.n	8000c1c <_printf_i+0xa8>
 8000ba6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000baa:	2b15      	cmp	r3, #21
 8000bac:	d8f6      	bhi.n	8000b9c <_printf_i+0x28>
 8000bae:	a101      	add	r1, pc, #4	@ (adr r1, 8000bb4 <_printf_i+0x40>)
 8000bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000bb4:	08000c0d 	.word	0x08000c0d
 8000bb8:	08000c21 	.word	0x08000c21
 8000bbc:	08000b9d 	.word	0x08000b9d
 8000bc0:	08000b9d 	.word	0x08000b9d
 8000bc4:	08000b9d 	.word	0x08000b9d
 8000bc8:	08000b9d 	.word	0x08000b9d
 8000bcc:	08000c21 	.word	0x08000c21
 8000bd0:	08000b9d 	.word	0x08000b9d
 8000bd4:	08000b9d 	.word	0x08000b9d
 8000bd8:	08000b9d 	.word	0x08000b9d
 8000bdc:	08000b9d 	.word	0x08000b9d
 8000be0:	08000d21 	.word	0x08000d21
 8000be4:	08000c4b 	.word	0x08000c4b
 8000be8:	08000cdb 	.word	0x08000cdb
 8000bec:	08000b9d 	.word	0x08000b9d
 8000bf0:	08000b9d 	.word	0x08000b9d
 8000bf4:	08000d43 	.word	0x08000d43
 8000bf8:	08000b9d 	.word	0x08000b9d
 8000bfc:	08000c4b 	.word	0x08000c4b
 8000c00:	08000b9d 	.word	0x08000b9d
 8000c04:	08000b9d 	.word	0x08000b9d
 8000c08:	08000ce3 	.word	0x08000ce3
 8000c0c:	6833      	ldr	r3, [r6, #0]
 8000c0e:	1d1a      	adds	r2, r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6032      	str	r2, [r6, #0]
 8000c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e09d      	b.n	8000d5c <_printf_i+0x1e8>
 8000c20:	6833      	ldr	r3, [r6, #0]
 8000c22:	6820      	ldr	r0, [r4, #0]
 8000c24:	1d19      	adds	r1, r3, #4
 8000c26:	6031      	str	r1, [r6, #0]
 8000c28:	0606      	lsls	r6, r0, #24
 8000c2a:	d501      	bpl.n	8000c30 <_printf_i+0xbc>
 8000c2c:	681d      	ldr	r5, [r3, #0]
 8000c2e:	e003      	b.n	8000c38 <_printf_i+0xc4>
 8000c30:	0645      	lsls	r5, r0, #25
 8000c32:	d5fb      	bpl.n	8000c2c <_printf_i+0xb8>
 8000c34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	da03      	bge.n	8000c44 <_printf_i+0xd0>
 8000c3c:	232d      	movs	r3, #45	@ 0x2d
 8000c3e:	426d      	negs	r5, r5
 8000c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c44:	4859      	ldr	r0, [pc, #356]	@ (8000dac <_printf_i+0x238>)
 8000c46:	230a      	movs	r3, #10
 8000c48:	e011      	b.n	8000c6e <_printf_i+0xfa>
 8000c4a:	6821      	ldr	r1, [r4, #0]
 8000c4c:	6833      	ldr	r3, [r6, #0]
 8000c4e:	0608      	lsls	r0, r1, #24
 8000c50:	f853 5b04 	ldr.w	r5, [r3], #4
 8000c54:	d402      	bmi.n	8000c5c <_printf_i+0xe8>
 8000c56:	0649      	lsls	r1, r1, #25
 8000c58:	bf48      	it	mi
 8000c5a:	b2ad      	uxthmi	r5, r5
 8000c5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000c5e:	4853      	ldr	r0, [pc, #332]	@ (8000dac <_printf_i+0x238>)
 8000c60:	6033      	str	r3, [r6, #0]
 8000c62:	bf14      	ite	ne
 8000c64:	230a      	movne	r3, #10
 8000c66:	2308      	moveq	r3, #8
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000c6e:	6866      	ldr	r6, [r4, #4]
 8000c70:	60a6      	str	r6, [r4, #8]
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	bfa2      	ittt	ge
 8000c76:	6821      	ldrge	r1, [r4, #0]
 8000c78:	f021 0104 	bicge.w	r1, r1, #4
 8000c7c:	6021      	strge	r1, [r4, #0]
 8000c7e:	b90d      	cbnz	r5, 8000c84 <_printf_i+0x110>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d04b      	beq.n	8000d1c <_printf_i+0x1a8>
 8000c84:	4616      	mov	r6, r2
 8000c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8000c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8000c8e:	5dc7      	ldrb	r7, [r0, r7]
 8000c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000c94:	462f      	mov	r7, r5
 8000c96:	42bb      	cmp	r3, r7
 8000c98:	460d      	mov	r5, r1
 8000c9a:	d9f4      	bls.n	8000c86 <_printf_i+0x112>
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d10b      	bne.n	8000cb8 <_printf_i+0x144>
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	07df      	lsls	r7, r3, #31
 8000ca4:	d508      	bpl.n	8000cb8 <_printf_i+0x144>
 8000ca6:	6923      	ldr	r3, [r4, #16]
 8000ca8:	6861      	ldr	r1, [r4, #4]
 8000caa:	4299      	cmp	r1, r3
 8000cac:	bfde      	ittt	le
 8000cae:	2330      	movle	r3, #48	@ 0x30
 8000cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000cb8:	1b92      	subs	r2, r2, r6
 8000cba:	6122      	str	r2, [r4, #16]
 8000cbc:	f8cd a000 	str.w	sl, [sp]
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	aa03      	add	r2, sp, #12
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	4640      	mov	r0, r8
 8000cc8:	f7ff fee6 	bl	8000a98 <_printf_common>
 8000ccc:	3001      	adds	r0, #1
 8000cce:	d14a      	bne.n	8000d66 <_printf_i+0x1f2>
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	b004      	add	sp, #16
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6023      	str	r3, [r4, #0]
 8000ce2:	4833      	ldr	r0, [pc, #204]	@ (8000db0 <_printf_i+0x23c>)
 8000ce4:	2778      	movs	r7, #120	@ 0x78
 8000ce6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	6831      	ldr	r1, [r6, #0]
 8000cee:	061f      	lsls	r7, r3, #24
 8000cf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000cf4:	d402      	bmi.n	8000cfc <_printf_i+0x188>
 8000cf6:	065f      	lsls	r7, r3, #25
 8000cf8:	bf48      	it	mi
 8000cfa:	b2ad      	uxthmi	r5, r5
 8000cfc:	6031      	str	r1, [r6, #0]
 8000cfe:	07d9      	lsls	r1, r3, #31
 8000d00:	bf44      	itt	mi
 8000d02:	f043 0320 	orrmi.w	r3, r3, #32
 8000d06:	6023      	strmi	r3, [r4, #0]
 8000d08:	b11d      	cbz	r5, 8000d12 <_printf_i+0x19e>
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	e7ac      	b.n	8000c68 <_printf_i+0xf4>
 8000d0e:	4827      	ldr	r0, [pc, #156]	@ (8000dac <_printf_i+0x238>)
 8000d10:	e7e9      	b.n	8000ce6 <_printf_i+0x172>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	f023 0320 	bic.w	r3, r3, #32
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	e7f6      	b.n	8000d0a <_printf_i+0x196>
 8000d1c:	4616      	mov	r6, r2
 8000d1e:	e7bd      	b.n	8000c9c <_printf_i+0x128>
 8000d20:	6833      	ldr	r3, [r6, #0]
 8000d22:	6825      	ldr	r5, [r4, #0]
 8000d24:	6961      	ldr	r1, [r4, #20]
 8000d26:	1d18      	adds	r0, r3, #4
 8000d28:	6030      	str	r0, [r6, #0]
 8000d2a:	062e      	lsls	r6, r5, #24
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	d501      	bpl.n	8000d34 <_printf_i+0x1c0>
 8000d30:	6019      	str	r1, [r3, #0]
 8000d32:	e002      	b.n	8000d3a <_printf_i+0x1c6>
 8000d34:	0668      	lsls	r0, r5, #25
 8000d36:	d5fb      	bpl.n	8000d30 <_printf_i+0x1bc>
 8000d38:	8019      	strh	r1, [r3, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6123      	str	r3, [r4, #16]
 8000d3e:	4616      	mov	r6, r2
 8000d40:	e7bc      	b.n	8000cbc <_printf_i+0x148>
 8000d42:	6833      	ldr	r3, [r6, #0]
 8000d44:	1d1a      	adds	r2, r3, #4
 8000d46:	6032      	str	r2, [r6, #0]
 8000d48:	681e      	ldr	r6, [r3, #0]
 8000d4a:	6862      	ldr	r2, [r4, #4]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f7ff fa5e 	bl	8000210 <memchr>
 8000d54:	b108      	cbz	r0, 8000d5a <_printf_i+0x1e6>
 8000d56:	1b80      	subs	r0, r0, r6
 8000d58:	6060      	str	r0, [r4, #4]
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	6123      	str	r3, [r4, #16]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d64:	e7aa      	b.n	8000cbc <_printf_i+0x148>
 8000d66:	6923      	ldr	r3, [r4, #16]
 8000d68:	4632      	mov	r2, r6
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	47d0      	blx	sl
 8000d70:	3001      	adds	r0, #1
 8000d72:	d0ad      	beq.n	8000cd0 <_printf_i+0x15c>
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	079b      	lsls	r3, r3, #30
 8000d78:	d413      	bmi.n	8000da2 <_printf_i+0x22e>
 8000d7a:	68e0      	ldr	r0, [r4, #12]
 8000d7c:	9b03      	ldr	r3, [sp, #12]
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	bfb8      	it	lt
 8000d82:	4618      	movlt	r0, r3
 8000d84:	e7a6      	b.n	8000cd4 <_printf_i+0x160>
 8000d86:	2301      	movs	r3, #1
 8000d88:	4632      	mov	r2, r6
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	47d0      	blx	sl
 8000d90:	3001      	adds	r0, #1
 8000d92:	d09d      	beq.n	8000cd0 <_printf_i+0x15c>
 8000d94:	3501      	adds	r5, #1
 8000d96:	68e3      	ldr	r3, [r4, #12]
 8000d98:	9903      	ldr	r1, [sp, #12]
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	dcf2      	bgt.n	8000d86 <_printf_i+0x212>
 8000da0:	e7eb      	b.n	8000d7a <_printf_i+0x206>
 8000da2:	2500      	movs	r5, #0
 8000da4:	f104 0619 	add.w	r6, r4, #25
 8000da8:	e7f5      	b.n	8000d96 <_printf_i+0x222>
 8000daa:	bf00      	nop
 8000dac:	08000ee1 	.word	0x08000ee1
 8000db0:	08000ef2 	.word	0x08000ef2

08000db4 <memmove>:
 8000db4:	4288      	cmp	r0, r1
 8000db6:	b510      	push	{r4, lr}
 8000db8:	eb01 0402 	add.w	r4, r1, r2
 8000dbc:	d902      	bls.n	8000dc4 <memmove+0x10>
 8000dbe:	4284      	cmp	r4, r0
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	d807      	bhi.n	8000dd4 <memmove+0x20>
 8000dc4:	1e43      	subs	r3, r0, #1
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	d008      	beq.n	8000ddc <memmove+0x28>
 8000dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000dd2:	e7f8      	b.n	8000dc6 <memmove+0x12>
 8000dd4:	4402      	add	r2, r0
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	428a      	cmp	r2, r1
 8000dda:	d100      	bne.n	8000dde <memmove+0x2a>
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000de6:	e7f7      	b.n	8000dd8 <memmove+0x24>

08000de8 <_sbrk_r>:
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4d06      	ldr	r5, [pc, #24]	@ (8000e04 <_sbrk_r+0x1c>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	4604      	mov	r4, r0
 8000df0:	4608      	mov	r0, r1
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	f7ff fb54 	bl	80004a0 <_sbrk>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_sbrk_r+0x1a>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_sbrk_r+0x1a>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	200001a8 	.word	0x200001a8

08000e08 <memcpy>:
 8000e08:	440a      	add	r2, r1
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e10:	d100      	bne.n	8000e14 <memcpy+0xc>
 8000e12:	4770      	bx	lr
 8000e14:	b510      	push	{r4, lr}
 8000e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d1f9      	bne.n	8000e16 <memcpy+0xe>
 8000e22:	bd10      	pop	{r4, pc}

08000e24 <_realloc_r>:
 8000e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e28:	4680      	mov	r8, r0
 8000e2a:	4615      	mov	r5, r2
 8000e2c:	460c      	mov	r4, r1
 8000e2e:	b921      	cbnz	r1, 8000e3a <_realloc_r+0x16>
 8000e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e34:	4611      	mov	r1, r2
 8000e36:	f7ff bc4b 	b.w	80006d0 <_malloc_r>
 8000e3a:	b92a      	cbnz	r2, 8000e48 <_realloc_r+0x24>
 8000e3c:	f7ff fbdc 	bl	80005f8 <_free_r>
 8000e40:	2400      	movs	r4, #0
 8000e42:	4620      	mov	r0, r4
 8000e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e48:	f000 f81a 	bl	8000e80 <_malloc_usable_size_r>
 8000e4c:	4285      	cmp	r5, r0
 8000e4e:	4606      	mov	r6, r0
 8000e50:	d802      	bhi.n	8000e58 <_realloc_r+0x34>
 8000e52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000e56:	d8f4      	bhi.n	8000e42 <_realloc_r+0x1e>
 8000e58:	4629      	mov	r1, r5
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	f7ff fc38 	bl	80006d0 <_malloc_r>
 8000e60:	4607      	mov	r7, r0
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d0ec      	beq.n	8000e40 <_realloc_r+0x1c>
 8000e66:	42b5      	cmp	r5, r6
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	bf28      	it	cs
 8000e6e:	4632      	movcs	r2, r6
 8000e70:	f7ff ffca 	bl	8000e08 <memcpy>
 8000e74:	4621      	mov	r1, r4
 8000e76:	4640      	mov	r0, r8
 8000e78:	f7ff fbbe 	bl	80005f8 <_free_r>
 8000e7c:	463c      	mov	r4, r7
 8000e7e:	e7e0      	b.n	8000e42 <_realloc_r+0x1e>

08000e80 <_malloc_usable_size_r>:
 8000e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e84:	1f18      	subs	r0, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bfbc      	itt	lt
 8000e8a:	580b      	ldrlt	r3, [r1, r0]
 8000e8c:	18c0      	addlt	r0, r0, r3
 8000e8e:	4770      	bx	lr

08000e90 <_init>:
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	bf00      	nop
 8000e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	469e      	mov	lr, r3
 8000e9a:	4770      	bx	lr

08000e9c <_fini>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr
