
I2C_with_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001110  08001110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001188  08001188  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001188  08001188  00002188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001190  08001190  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001190  08001190  00002190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001194  08001194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001198  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  080011e8  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080011e8  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007bf  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000297  00000000  00000000  0000383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00003ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000074  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019930  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fdb  00000000  00000000  0001d524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f033  00000000  00000000  0001e4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e8  00000000  00000000  000ad578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000adc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080010f8 	.word	0x080010f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	080010f8 	.word	0x080010f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void uart2_init(void);
void uart2_write(char c);
void uart2_print(char* s);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b096      	sub	sp, #88	@ 0x58
 80002b4:	af02      	add	r7, sp, #8
	i2c1_gpio_init();
 80002b6:	f000 f84b 	bl	8000350 <i2c1_gpio_init>
	i2c1_init();
 80002ba:	f000 f897 	bl	80003ec <i2c1_init>
	uart2_init();
 80002be:	f000 f9b3 	bl	8000628 <uart2_init>

	// Enable measurement mode
	i2c1_write_register(ADXL345_ADDR, 0x2D, 0x08);
 80002c2:	2208      	movs	r2, #8
 80002c4:	212d      	movs	r1, #45	@ 0x2d
 80002c6:	2053      	movs	r0, #83	@ 0x53
 80002c8:	f000 f928 	bl	800051c <i2c1_write_register>

	uint8_t device_id = i2c1_read_register(ADXL345_ADDR, 0x00);
 80002cc:	2100      	movs	r1, #0
 80002ce:	2053      	movs	r0, #83	@ 0x53
 80002d0:	f000 f8b8 	bl	8000444 <i2c1_read_register>
 80002d4:	4603      	mov	r3, r0
 80002d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (device_id == 0xE5)
 80002da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80002de:	2be5      	cmp	r3, #229	@ 0xe5
 80002e0:	d103      	bne.n	80002ea <main+0x3a>
		uart2_print("ADXL345 detected!\r\n");
 80002e2:	4817      	ldr	r0, [pc, #92]	@ (8000340 <main+0x90>)
 80002e4:	f000 f9fa 	bl	80006dc <uart2_print>
 80002e8:	e002      	b.n	80002f0 <main+0x40>
	else
		uart2_print("Device ID mismatch!\r\n");
 80002ea:	4816      	ldr	r0, [pc, #88]	@ (8000344 <main+0x94>)
 80002ec:	f000 f9f6 	bl	80006dc <uart2_print>
	char buffer[64];
	int16_t x, y, z;

	while (1)
	{
		read_accel_xyz(&x, &y, &z);
 80002f0:	1dba      	adds	r2, r7, #6
 80002f2:	f107 0108 	add.w	r1, r7, #8
 80002f6:	f107 030a 	add.w	r3, r7, #10
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f956 	bl	80005ac <read_accel_xyz>

		sprintf(buffer, "X: %d  Y: %d  Z: %d\r\n", x, y, z);
 8000300:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000304:	461a      	mov	r2, r3
 8000306:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800030a:	4619      	mov	r1, r3
 800030c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000310:	f107 000c 	add.w	r0, r7, #12
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	460b      	mov	r3, r1
 8000318:	490b      	ldr	r1, [pc, #44]	@ (8000348 <main+0x98>)
 800031a:	f000 fa55 	bl	80007c8 <siprintf>
		uart2_print(buffer);
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f9da 	bl	80006dc <uart2_print>

		for (volatile int i = 0; i < 100000; i++); // Delay
 8000328:	2300      	movs	r3, #0
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	e002      	b.n	8000334 <main+0x84>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	4a05      	ldr	r2, [pc, #20]	@ (800034c <main+0x9c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	ddf8      	ble.n	800032e <main+0x7e>
		read_accel_xyz(&x, &y, &z);
 800033c:	e7d8      	b.n	80002f0 <main+0x40>
 800033e:	bf00      	nop
 8000340:	08001110 	.word	0x08001110
 8000344:	08001124 	.word	0x08001124
 8000348:	0800113c 	.word	0x0800113c
 800034c:	0001869f 	.word	0x0001869f

08000350 <i2c1_gpio_init>:

//i2c1 SCL PB6
//i2c1 SDA PB7
//AF4
void i2c1_gpio_init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	//enable GPIOB clock
	RCC->AHB1ENR |= (1U<<1);
 8000354:	4b23      	ldr	r3, [pc, #140]	@ (80003e4 <i2c1_gpio_init+0x94>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000358:	4a22      	ldr	r2, [pc, #136]	@ (80003e4 <i2c1_gpio_init+0x94>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	@ 0x30

	//alternative mode
	GPIOB->MODER &= ~(3U<<(2*6));
 8000360:	4b21      	ldr	r3, [pc, #132]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a20      	ldr	r2, [pc, #128]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<(2*7));
 800036c:	4b1e      	ldr	r3, [pc, #120]	@ (80003e8 <i2c1_gpio_init+0x98>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1d      	ldr	r2, [pc, #116]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000372:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((2U<<(2*6)) | (2U<<(2*7)));
 8000378:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <i2c1_gpio_init+0x98>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1a      	ldr	r2, [pc, #104]	@ (80003e8 <i2c1_gpio_init+0x98>)
 800037e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000382:	6013      	str	r3, [r2, #0]
	//AF4 configuration for PB6 and PB7
	GPIOB->AFR[0] &= ~(0xF<<(4*6));
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	4a17      	ldr	r2, [pc, #92]	@ (80003e8 <i2c1_gpio_init+0x98>)
 800038a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800038e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(0xF<<(4*7));
 8000390:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000392:	6a1b      	ldr	r3, [r3, #32]
 8000394:	4a14      	ldr	r2, [pc, #80]	@ (80003e8 <i2c1_gpio_init+0x98>)
 8000396:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800039a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((4U<<(4*6)) | (4U<<(4*7)));
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <i2c1_gpio_init+0x98>)
 800039e:	6a1b      	ldr	r3, [r3, #32]
 80003a0:	4a11      	ldr	r2, [pc, #68]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003a2:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80003a6:	6213      	str	r3, [r2, #32]

	//enable internal pullup resistor
	GPIOB->PUPDR &= ~(3U<<(2*6));
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80003b2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(3U<<(2*7));
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003be:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= ((1U<<(2*6)) | (1U<<(2*7)));
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003c6:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80003ca:	60d3      	str	r3, [r2, #12]

	//open drain mode
	GPIOB->OTYPER |= ((1U<<6) | (1U<<7));
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <i2c1_gpio_init+0x98>)
 80003d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80003d6:	6053      	str	r3, [r2, #4]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020400 	.word	0x40020400

080003ec <i2c1_init>:

void i2c1_init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	//enable i2c1 clock
	RCC->APB1ENR |= (1U<<21);
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <i2c1_init+0x50>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <i2c1_init+0x50>)
 80003f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003fa:	6413      	str	r3, [r2, #64]	@ 0x40

	//resetting the I2C1
	I2C1->CR1 |= (1U<<15);
 80003fc:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <i2c1_init+0x54>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0f      	ldr	r2, [pc, #60]	@ (8000440 <i2c1_init+0x54>)
 8000402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000406:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <i2c1_init+0x54>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0c      	ldr	r2, [pc, #48]	@ (8000440 <i2c1_init+0x54>)
 800040e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000412:	6013      	str	r3, [r2, #0]

	//assigning 16 Mhz clock of PCLK to CCR register
	I2C1->CR2 = 16;
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <i2c1_init+0x54>)
 8000416:	2210      	movs	r2, #16
 8000418:	605a      	str	r2, [r3, #4]

	//configure the i2c1 clock to be 100Khz
	I2C1->CCR = 80;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <i2c1_init+0x54>)
 800041c:	2250      	movs	r2, #80	@ 0x50
 800041e:	61da      	str	r2, [r3, #28]

	//configure rise time
	I2C1->TRISE = 17;
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <i2c1_init+0x54>)
 8000422:	2211      	movs	r2, #17
 8000424:	621a      	str	r2, [r3, #32]

	//enable the peripheral
	I2C1->CR1 |= (1U<<0);
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <i2c1_init+0x54>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <i2c1_init+0x54>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800
 8000440:	40005400 	.word	0x40005400

08000444 <i2c1_read_register>:

uint8_t i2c1_read_register(uint8_t slave_addr , uint8_t reg_addr)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	uint8_t received;

	//enable start bit
	I2C1->CR1 |= (1U<<8);
 8000454:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <i2c1_read_register+0xd4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a2f      	ldr	r2, [pc, #188]	@ (8000518 <i2c1_read_register+0xd4>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800045e:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1U<<0)));
 8000460:	bf00      	nop
 8000462:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <i2c1_read_register+0xd4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <i2c1_read_register+0x1e>

	I2C1->DR = (slave_addr<<1); //write LSB is 0
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a29      	ldr	r2, [pc, #164]	@ (8000518 <i2c1_read_register+0xd4>)
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1<<1))); //wait to check for address
 8000476:	bf00      	nop
 8000478:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <i2c1_read_register+0xd4>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f003 0302 	and.w	r3, r3, #2
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <i2c1_read_register+0x34>
	(void)I2C1->SR1;
 8000484:	4b24      	ldr	r3, [pc, #144]	@ (8000518 <i2c1_read_register+0xd4>)
 8000486:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000488:	4b23      	ldr	r3, [pc, #140]	@ (8000518 <i2c1_read_register+0xd4>)
 800048a:	699b      	ldr	r3, [r3, #24]

	I2C1->DR = reg_addr;
 800048c:	4a22      	ldr	r2, [pc, #136]	@ (8000518 <i2c1_read_register+0xd4>)
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1U<<7))); //TxE bit Data register empty (transmitters)
 8000492:	bf00      	nop
 8000494:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <i2c1_read_register+0xd4>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <i2c1_read_register+0x50>

	//reinitialize start bit again
	I2C1->CR1 |= (1U<<8);
 80004a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <i2c1_read_register+0xd4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000518 <i2c1_read_register+0xd4>)
 80004a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004aa:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1U<<0)));
 80004ac:	bf00      	nop
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <i2c1_read_register+0xd4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f9      	beq.n	80004ae <i2c1_read_register+0x6a>

	I2C1->DR = ((slave_addr<<1) | 1); //LSB is 1 for read
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	f043 0201 	orr.w	r2, r3, #1
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <i2c1_read_register+0xd4>)
 80004c4:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & (1U<<1)));
 80004c6:	bf00      	nop
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <i2c1_read_register+0xd4>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	f003 0302 	and.w	r3, r3, #2
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0f9      	beq.n	80004c8 <i2c1_read_register+0x84>
	(void)I2C1->SR1;
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <i2c1_read_register+0xd4>)
 80004d6:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <i2c1_read_register+0xd4>)
 80004da:	699b      	ldr	r3, [r3, #24]

	//disable acknowledge
	I2C1->CR1 &= ~(1U<<10);
 80004dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <i2c1_read_register+0xd4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <i2c1_read_register+0xd4>)
 80004e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004e6:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR1 & (1U<<6))); // wait for RXNE
 80004e8:	bf00      	nop
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <i2c1_read_register+0xd4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <i2c1_read_register+0xa6>

	//generate stop
	I2C1->CR1 |= (1U<<9);
 80004f6:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <i2c1_read_register+0xd4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <i2c1_read_register+0xd4>)
 80004fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000500:	6013      	str	r3, [r2, #0]
	received = I2C1->DR;
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <i2c1_read_register+0xd4>)
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	73fb      	strb	r3, [r7, #15]

	return received;
 8000508:	7bfb      	ldrb	r3, [r7, #15]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40005400 	.word	0x40005400

0800051c <i2c1_write_register>:

void i2c1_write_register(uint8_t slave_addr , uint8_t reg_addr, uint8_t data)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	460b      	mov	r3, r1
 8000528:	71bb      	strb	r3, [r7, #6]
 800052a:	4613      	mov	r3, r2
 800052c:	717b      	strb	r3, [r7, #5]
	I2C1->CR1 |= (1U<<8);
 800052e:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1d      	ldr	r2, [pc, #116]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000538:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1U<<0)));
 800053a:	bf00      	nop
 800053c:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <i2c1_write_register+0x8c>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <i2c1_write_register+0x20>

	I2C1->DR = (slave_addr<<1);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <i2c1_write_register+0x8c>)
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1U<<1)));
 8000550:	bf00      	nop
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f9      	beq.n	8000552 <i2c1_write_register+0x36>
	(void)I2C1->SR1;
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000560:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000564:	699b      	ldr	r3, [r3, #24]

	I2C1->DR = reg_addr;
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1U<<7)));
 800056c:	bf00      	nop
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0f9      	beq.n	800056e <i2c1_write_register+0x52>

	I2C1->DR = data;
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <i2c1_write_register+0x8c>)
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1U<<2))); //BTF (byte transfer finished)
 8000580:	bf00      	nop
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f9      	beq.n	8000582 <i2c1_write_register+0x66>

	I2C1->CR1 |= (1U<<9); // STOP
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <i2c1_write_register+0x8c>)
 8000594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400

080005ac <read_accel_xyz>:

void read_accel_xyz(int16_t* x , int16_t*y , int16_t* z)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	for(int i = 0 ; i<6 ; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	e012      	b.n	80005e4 <read_accel_xyz+0x38>
		data[i] = i2c1_read_register(ADXL345_ADDR , 0x32 + i);
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	3332      	adds	r3, #50	@ 0x32
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	2053      	movs	r0, #83	@ 0x53
 80005ca:	f7ff ff3b 	bl	8000444 <i2c1_read_register>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4619      	mov	r1, r3
 80005d2:	f107 0214 	add.w	r2, r7, #20
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	4413      	add	r3, r2
 80005da:	460a      	mov	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<6 ; i++)
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3301      	adds	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	dde9      	ble.n	80005be <read_accel_xyz+0x12>

	*x = ((int16_t)data[1] << 8) | data[0];
 80005ea:	7d7b      	ldrb	r3, [r7, #21]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	7d3b      	ldrb	r3, [r7, #20]
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t)data[3] << 8) | data[2];
 80005fc:	7dfb      	ldrb	r3, [r7, #23]
 80005fe:	021b      	lsls	r3, r3, #8
 8000600:	b21a      	sxth	r2, r3
 8000602:	7dbb      	ldrb	r3, [r7, #22]
 8000604:	b21b      	sxth	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b21a      	sxth	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t)data[5] << 8) | data[4];
 800060e:	7e7b      	ldrb	r3, [r7, #25]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	7e3b      	ldrb	r3, [r7, #24]
 8000616:	b21b      	sxth	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b21a      	sxth	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	801a      	strh	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <uart2_init>:

void uart2_init(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1U << 0);  // GPIOA
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <uart2_init+0x78>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <uart2_init+0x78>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= (1U<<17);
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <uart2_init+0x78>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <uart2_init+0x78>)
 800063e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER &= ~(3U << (2 * 2));
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <uart2_init+0x7c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <uart2_init+0x7c>)
 800064a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800064e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U << (2 * 2)); // Alternate function
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <uart2_init+0x7c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <uart2_init+0x7c>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(0xF << (4 * 2));
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <uart2_init+0x7c>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <uart2_init+0x7c>)
 8000662:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000666:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7U << (4 * 2)); // AF7
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <uart2_init+0x7c>)
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <uart2_init+0x7c>)
 800066e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000672:	6213      	str	r3, [r2, #32]

	USART2->BRR = 0x0683; // 9600 baud for 16MHz
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <uart2_init+0x80>)
 8000676:	f240 6283 	movw	r2, #1667	@ 0x683
 800067a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1U<<3); //tx enable
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <uart2_init+0x80>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4a09      	ldr	r2, [pc, #36]	@ (80006a8 <uart2_init+0x80>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<13); //uart enable
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <uart2_init+0x80>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <uart2_init+0x80>)
 800068e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000692:	60d3      	str	r3, [r2, #12]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40004400 	.word	0x40004400

080006ac <uart2_write>:

void uart2_write(char c)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->SR & (1U<<7)));
 80006b6:	bf00      	nop
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <uart2_write+0x2c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f9      	beq.n	80006b8 <uart2_write+0xc>
	USART2->DR = c;
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <uart2_write+0x2c>)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	6053      	str	r3, [r2, #4]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400

080006dc <uart2_print>:

void uart2_print(char* s)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while (*s)
 80006e4:	e006      	b.n	80006f4 <uart2_print+0x18>
		uart2_write(*s++);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffdc 	bl	80006ac <uart2_write>
	while (*s)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <uart2_print+0xa>
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000710:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <_sbrk+0x5c>)
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <_sbrk+0x60>)
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <_sbrk+0x64>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <_sbrk+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	429a      	cmp	r2, r3
 8000736:	d207      	bcs.n	8000748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000738:	f000 f866 	bl	8000808 <__errno>
 800073c:	4603      	mov	r3, r0
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	e009      	b.n	800075c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <_sbrk+0x64>)
 8000758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20020000 	.word	0x20020000
 8000768:	00000400 	.word	0x00000400
 800076c:	2000006c 	.word	0x2000006c
 8000770:	200001b8 	.word	0x200001b8

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	@ (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	@ (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f000 f837 	bl	8000814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fd83 	bl	80002b0 <main>

080007aa <LoopForever>:

LoopForever:
  b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80007b8:	08001198 	.word	0x08001198
  ldr r2, =_sbss
 80007bc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80007c0:	200001b8 	.word	0x200001b8

080007c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>
	...

080007c8 <siprintf>:
 80007c8:	b40e      	push	{r1, r2, r3}
 80007ca:	b500      	push	{lr}
 80007cc:	b09c      	sub	sp, #112	@ 0x70
 80007ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80007d0:	9002      	str	r0, [sp, #8]
 80007d2:	9006      	str	r0, [sp, #24]
 80007d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007d8:	4809      	ldr	r0, [pc, #36]	@ (8000800 <siprintf+0x38>)
 80007da:	9107      	str	r1, [sp, #28]
 80007dc:	9104      	str	r1, [sp, #16]
 80007de:	4909      	ldr	r1, [pc, #36]	@ (8000804 <siprintf+0x3c>)
 80007e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80007e4:	9105      	str	r1, [sp, #20]
 80007e6:	6800      	ldr	r0, [r0, #0]
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	a902      	add	r1, sp, #8
 80007ec:	f000 f98c 	bl	8000b08 <_svfiprintf_r>
 80007f0:	9b02      	ldr	r3, [sp, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	b01c      	add	sp, #112	@ 0x70
 80007f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80007fc:	b003      	add	sp, #12
 80007fe:	4770      	bx	lr
 8000800:	20000000 	.word	0x20000000
 8000804:	ffff0208 	.word	0xffff0208

08000808 <__errno>:
 8000808:	4b01      	ldr	r3, [pc, #4]	@ (8000810 <__errno+0x8>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000000 	.word	0x20000000

08000814 <__libc_init_array>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	4d0d      	ldr	r5, [pc, #52]	@ (800084c <__libc_init_array+0x38>)
 8000818:	4c0d      	ldr	r4, [pc, #52]	@ (8000850 <__libc_init_array+0x3c>)
 800081a:	1b64      	subs	r4, r4, r5
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	2600      	movs	r6, #0
 8000820:	42a6      	cmp	r6, r4
 8000822:	d109      	bne.n	8000838 <__libc_init_array+0x24>
 8000824:	4d0b      	ldr	r5, [pc, #44]	@ (8000854 <__libc_init_array+0x40>)
 8000826:	4c0c      	ldr	r4, [pc, #48]	@ (8000858 <__libc_init_array+0x44>)
 8000828:	f000 fc66 	bl	80010f8 <_init>
 800082c:	1b64      	subs	r4, r4, r5
 800082e:	10a4      	asrs	r4, r4, #2
 8000830:	2600      	movs	r6, #0
 8000832:	42a6      	cmp	r6, r4
 8000834:	d105      	bne.n	8000842 <__libc_init_array+0x2e>
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f855 3b04 	ldr.w	r3, [r5], #4
 800083c:	4798      	blx	r3
 800083e:	3601      	adds	r6, #1
 8000840:	e7ee      	b.n	8000820 <__libc_init_array+0xc>
 8000842:	f855 3b04 	ldr.w	r3, [r5], #4
 8000846:	4798      	blx	r3
 8000848:	3601      	adds	r6, #1
 800084a:	e7f2      	b.n	8000832 <__libc_init_array+0x1e>
 800084c:	08001190 	.word	0x08001190
 8000850:	08001190 	.word	0x08001190
 8000854:	08001190 	.word	0x08001190
 8000858:	08001194 	.word	0x08001194

0800085c <__retarget_lock_acquire_recursive>:
 800085c:	4770      	bx	lr

0800085e <__retarget_lock_release_recursive>:
 800085e:	4770      	bx	lr

08000860 <_free_r>:
 8000860:	b538      	push	{r3, r4, r5, lr}
 8000862:	4605      	mov	r5, r0
 8000864:	2900      	cmp	r1, #0
 8000866:	d041      	beq.n	80008ec <_free_r+0x8c>
 8000868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800086c:	1f0c      	subs	r4, r1, #4
 800086e:	2b00      	cmp	r3, #0
 8000870:	bfb8      	it	lt
 8000872:	18e4      	addlt	r4, r4, r3
 8000874:	f000 f8e0 	bl	8000a38 <__malloc_lock>
 8000878:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <_free_r+0x90>)
 800087a:	6813      	ldr	r3, [r2, #0]
 800087c:	b933      	cbnz	r3, 800088c <_free_r+0x2c>
 800087e:	6063      	str	r3, [r4, #4]
 8000880:	6014      	str	r4, [r2, #0]
 8000882:	4628      	mov	r0, r5
 8000884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000888:	f000 b8dc 	b.w	8000a44 <__malloc_unlock>
 800088c:	42a3      	cmp	r3, r4
 800088e:	d908      	bls.n	80008a2 <_free_r+0x42>
 8000890:	6820      	ldr	r0, [r4, #0]
 8000892:	1821      	adds	r1, r4, r0
 8000894:	428b      	cmp	r3, r1
 8000896:	bf01      	itttt	eq
 8000898:	6819      	ldreq	r1, [r3, #0]
 800089a:	685b      	ldreq	r3, [r3, #4]
 800089c:	1809      	addeq	r1, r1, r0
 800089e:	6021      	streq	r1, [r4, #0]
 80008a0:	e7ed      	b.n	800087e <_free_r+0x1e>
 80008a2:	461a      	mov	r2, r3
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	b10b      	cbz	r3, 80008ac <_free_r+0x4c>
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	d9fa      	bls.n	80008a2 <_free_r+0x42>
 80008ac:	6811      	ldr	r1, [r2, #0]
 80008ae:	1850      	adds	r0, r2, r1
 80008b0:	42a0      	cmp	r0, r4
 80008b2:	d10b      	bne.n	80008cc <_free_r+0x6c>
 80008b4:	6820      	ldr	r0, [r4, #0]
 80008b6:	4401      	add	r1, r0
 80008b8:	1850      	adds	r0, r2, r1
 80008ba:	4283      	cmp	r3, r0
 80008bc:	6011      	str	r1, [r2, #0]
 80008be:	d1e0      	bne.n	8000882 <_free_r+0x22>
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	6053      	str	r3, [r2, #4]
 80008c6:	4408      	add	r0, r1
 80008c8:	6010      	str	r0, [r2, #0]
 80008ca:	e7da      	b.n	8000882 <_free_r+0x22>
 80008cc:	d902      	bls.n	80008d4 <_free_r+0x74>
 80008ce:	230c      	movs	r3, #12
 80008d0:	602b      	str	r3, [r5, #0]
 80008d2:	e7d6      	b.n	8000882 <_free_r+0x22>
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	1821      	adds	r1, r4, r0
 80008d8:	428b      	cmp	r3, r1
 80008da:	bf04      	itt	eq
 80008dc:	6819      	ldreq	r1, [r3, #0]
 80008de:	685b      	ldreq	r3, [r3, #4]
 80008e0:	6063      	str	r3, [r4, #4]
 80008e2:	bf04      	itt	eq
 80008e4:	1809      	addeq	r1, r1, r0
 80008e6:	6021      	streq	r1, [r4, #0]
 80008e8:	6054      	str	r4, [r2, #4]
 80008ea:	e7ca      	b.n	8000882 <_free_r+0x22>
 80008ec:	bd38      	pop	{r3, r4, r5, pc}
 80008ee:	bf00      	nop
 80008f0:	200001b4 	.word	0x200001b4

080008f4 <sbrk_aligned>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4e0f      	ldr	r6, [pc, #60]	@ (8000934 <sbrk_aligned+0x40>)
 80008f8:	460c      	mov	r4, r1
 80008fa:	6831      	ldr	r1, [r6, #0]
 80008fc:	4605      	mov	r5, r0
 80008fe:	b911      	cbnz	r1, 8000906 <sbrk_aligned+0x12>
 8000900:	f000 fba6 	bl	8001050 <_sbrk_r>
 8000904:	6030      	str	r0, [r6, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fba1 	bl	8001050 <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d103      	bne.n	800091a <sbrk_aligned+0x26>
 8000912:	f04f 34ff 	mov.w	r4, #4294967295
 8000916:	4620      	mov	r0, r4
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	1cc4      	adds	r4, r0, #3
 800091c:	f024 0403 	bic.w	r4, r4, #3
 8000920:	42a0      	cmp	r0, r4
 8000922:	d0f8      	beq.n	8000916 <sbrk_aligned+0x22>
 8000924:	1a21      	subs	r1, r4, r0
 8000926:	4628      	mov	r0, r5
 8000928:	f000 fb92 	bl	8001050 <_sbrk_r>
 800092c:	3001      	adds	r0, #1
 800092e:	d1f2      	bne.n	8000916 <sbrk_aligned+0x22>
 8000930:	e7ef      	b.n	8000912 <sbrk_aligned+0x1e>
 8000932:	bf00      	nop
 8000934:	200001b0 	.word	0x200001b0

08000938 <_malloc_r>:
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	1ccd      	adds	r5, r1, #3
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	2d00      	cmp	r5, #0
 800094c:	4606      	mov	r6, r0
 800094e:	db01      	blt.n	8000954 <_malloc_r+0x1c>
 8000950:	42a9      	cmp	r1, r5
 8000952:	d904      	bls.n	800095e <_malloc_r+0x26>
 8000954:	230c      	movs	r3, #12
 8000956:	6033      	str	r3, [r6, #0]
 8000958:	2000      	movs	r0, #0
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a34 <_malloc_r+0xfc>
 8000962:	f000 f869 	bl	8000a38 <__malloc_lock>
 8000966:	f8d8 3000 	ldr.w	r3, [r8]
 800096a:	461c      	mov	r4, r3
 800096c:	bb44      	cbnz	r4, 80009c0 <_malloc_r+0x88>
 800096e:	4629      	mov	r1, r5
 8000970:	4630      	mov	r0, r6
 8000972:	f7ff ffbf 	bl	80008f4 <sbrk_aligned>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	4604      	mov	r4, r0
 800097a:	d158      	bne.n	8000a2e <_malloc_r+0xf6>
 800097c:	f8d8 4000 	ldr.w	r4, [r8]
 8000980:	4627      	mov	r7, r4
 8000982:	2f00      	cmp	r7, #0
 8000984:	d143      	bne.n	8000a0e <_malloc_r+0xd6>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d04b      	beq.n	8000a22 <_malloc_r+0xea>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	4639      	mov	r1, r7
 800098e:	4630      	mov	r0, r6
 8000990:	eb04 0903 	add.w	r9, r4, r3
 8000994:	f000 fb5c 	bl	8001050 <_sbrk_r>
 8000998:	4581      	cmp	r9, r0
 800099a:	d142      	bne.n	8000a22 <_malloc_r+0xea>
 800099c:	6821      	ldr	r1, [r4, #0]
 800099e:	1a6d      	subs	r5, r5, r1
 80009a0:	4629      	mov	r1, r5
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff ffa6 	bl	80008f4 <sbrk_aligned>
 80009a8:	3001      	adds	r0, #1
 80009aa:	d03a      	beq.n	8000a22 <_malloc_r+0xea>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	442b      	add	r3, r5
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	f8d8 3000 	ldr.w	r3, [r8]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	bb62      	cbnz	r2, 8000a14 <_malloc_r+0xdc>
 80009ba:	f8c8 7000 	str.w	r7, [r8]
 80009be:	e00f      	b.n	80009e0 <_malloc_r+0xa8>
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	1b52      	subs	r2, r2, r5
 80009c4:	d420      	bmi.n	8000a08 <_malloc_r+0xd0>
 80009c6:	2a0b      	cmp	r2, #11
 80009c8:	d917      	bls.n	80009fa <_malloc_r+0xc2>
 80009ca:	1961      	adds	r1, r4, r5
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	6025      	str	r5, [r4, #0]
 80009d0:	bf18      	it	ne
 80009d2:	6059      	strne	r1, [r3, #4]
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	bf08      	it	eq
 80009d8:	f8c8 1000 	streq.w	r1, [r8]
 80009dc:	5162      	str	r2, [r4, r5]
 80009de:	604b      	str	r3, [r1, #4]
 80009e0:	4630      	mov	r0, r6
 80009e2:	f000 f82f 	bl	8000a44 <__malloc_unlock>
 80009e6:	f104 000b 	add.w	r0, r4, #11
 80009ea:	1d23      	adds	r3, r4, #4
 80009ec:	f020 0007 	bic.w	r0, r0, #7
 80009f0:	1ac2      	subs	r2, r0, r3
 80009f2:	bf1c      	itt	ne
 80009f4:	1a1b      	subne	r3, r3, r0
 80009f6:	50a3      	strne	r3, [r4, r2]
 80009f8:	e7af      	b.n	800095a <_malloc_r+0x22>
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	42a3      	cmp	r3, r4
 80009fe:	bf0c      	ite	eq
 8000a00:	f8c8 2000 	streq.w	r2, [r8]
 8000a04:	605a      	strne	r2, [r3, #4]
 8000a06:	e7eb      	b.n	80009e0 <_malloc_r+0xa8>
 8000a08:	4623      	mov	r3, r4
 8000a0a:	6864      	ldr	r4, [r4, #4]
 8000a0c:	e7ae      	b.n	800096c <_malloc_r+0x34>
 8000a0e:	463c      	mov	r4, r7
 8000a10:	687f      	ldr	r7, [r7, #4]
 8000a12:	e7b6      	b.n	8000982 <_malloc_r+0x4a>
 8000a14:	461a      	mov	r2, r3
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d1fb      	bne.n	8000a14 <_malloc_r+0xdc>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6053      	str	r3, [r2, #4]
 8000a20:	e7de      	b.n	80009e0 <_malloc_r+0xa8>
 8000a22:	230c      	movs	r3, #12
 8000a24:	6033      	str	r3, [r6, #0]
 8000a26:	4630      	mov	r0, r6
 8000a28:	f000 f80c 	bl	8000a44 <__malloc_unlock>
 8000a2c:	e794      	b.n	8000958 <_malloc_r+0x20>
 8000a2e:	6005      	str	r5, [r0, #0]
 8000a30:	e7d6      	b.n	80009e0 <_malloc_r+0xa8>
 8000a32:	bf00      	nop
 8000a34:	200001b4 	.word	0x200001b4

08000a38 <__malloc_lock>:
 8000a38:	4801      	ldr	r0, [pc, #4]	@ (8000a40 <__malloc_lock+0x8>)
 8000a3a:	f7ff bf0f 	b.w	800085c <__retarget_lock_acquire_recursive>
 8000a3e:	bf00      	nop
 8000a40:	200001ac 	.word	0x200001ac

08000a44 <__malloc_unlock>:
 8000a44:	4801      	ldr	r0, [pc, #4]	@ (8000a4c <__malloc_unlock+0x8>)
 8000a46:	f7ff bf0a 	b.w	800085e <__retarget_lock_release_recursive>
 8000a4a:	bf00      	nop
 8000a4c:	200001ac 	.word	0x200001ac

08000a50 <__ssputs_r>:
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a54:	688e      	ldr	r6, [r1, #8]
 8000a56:	461f      	mov	r7, r3
 8000a58:	42be      	cmp	r6, r7
 8000a5a:	680b      	ldr	r3, [r1, #0]
 8000a5c:	4682      	mov	sl, r0
 8000a5e:	460c      	mov	r4, r1
 8000a60:	4690      	mov	r8, r2
 8000a62:	d82d      	bhi.n	8000ac0 <__ssputs_r+0x70>
 8000a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a6c:	d026      	beq.n	8000abc <__ssputs_r+0x6c>
 8000a6e:	6965      	ldr	r5, [r4, #20]
 8000a70:	6909      	ldr	r1, [r1, #16]
 8000a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a76:	eba3 0901 	sub.w	r9, r3, r1
 8000a7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a7e:	1c7b      	adds	r3, r7, #1
 8000a80:	444b      	add	r3, r9
 8000a82:	106d      	asrs	r5, r5, #1
 8000a84:	429d      	cmp	r5, r3
 8000a86:	bf38      	it	cc
 8000a88:	461d      	movcc	r5, r3
 8000a8a:	0553      	lsls	r3, r2, #21
 8000a8c:	d527      	bpl.n	8000ade <__ssputs_r+0x8e>
 8000a8e:	4629      	mov	r1, r5
 8000a90:	f7ff ff52 	bl	8000938 <_malloc_r>
 8000a94:	4606      	mov	r6, r0
 8000a96:	b360      	cbz	r0, 8000af2 <__ssputs_r+0xa2>
 8000a98:	6921      	ldr	r1, [r4, #16]
 8000a9a:	464a      	mov	r2, r9
 8000a9c:	f000 fae8 	bl	8001070 <memcpy>
 8000aa0:	89a3      	ldrh	r3, [r4, #12]
 8000aa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aaa:	81a3      	strh	r3, [r4, #12]
 8000aac:	6126      	str	r6, [r4, #16]
 8000aae:	6165      	str	r5, [r4, #20]
 8000ab0:	444e      	add	r6, r9
 8000ab2:	eba5 0509 	sub.w	r5, r5, r9
 8000ab6:	6026      	str	r6, [r4, #0]
 8000ab8:	60a5      	str	r5, [r4, #8]
 8000aba:	463e      	mov	r6, r7
 8000abc:	42be      	cmp	r6, r7
 8000abe:	d900      	bls.n	8000ac2 <__ssputs_r+0x72>
 8000ac0:	463e      	mov	r6, r7
 8000ac2:	6820      	ldr	r0, [r4, #0]
 8000ac4:	4632      	mov	r2, r6
 8000ac6:	4641      	mov	r1, r8
 8000ac8:	f000 faa8 	bl	800101c <memmove>
 8000acc:	68a3      	ldr	r3, [r4, #8]
 8000ace:	1b9b      	subs	r3, r3, r6
 8000ad0:	60a3      	str	r3, [r4, #8]
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	4433      	add	r3, r6
 8000ad6:	6023      	str	r3, [r4, #0]
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	462a      	mov	r2, r5
 8000ae0:	f000 fad4 	bl	800108c <_realloc_r>
 8000ae4:	4606      	mov	r6, r0
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d1e0      	bne.n	8000aac <__ssputs_r+0x5c>
 8000aea:	6921      	ldr	r1, [r4, #16]
 8000aec:	4650      	mov	r0, sl
 8000aee:	f7ff feb7 	bl	8000860 <_free_r>
 8000af2:	230c      	movs	r3, #12
 8000af4:	f8ca 3000 	str.w	r3, [sl]
 8000af8:	89a3      	ldrh	r3, [r4, #12]
 8000afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000afe:	81a3      	strh	r3, [r4, #12]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	e7e9      	b.n	8000ada <__ssputs_r+0x8a>
	...

08000b08 <_svfiprintf_r>:
 8000b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	898b      	ldrh	r3, [r1, #12]
 8000b10:	061b      	lsls	r3, r3, #24
 8000b12:	b09d      	sub	sp, #116	@ 0x74
 8000b14:	4607      	mov	r7, r0
 8000b16:	460d      	mov	r5, r1
 8000b18:	4614      	mov	r4, r2
 8000b1a:	d510      	bpl.n	8000b3e <_svfiprintf_r+0x36>
 8000b1c:	690b      	ldr	r3, [r1, #16]
 8000b1e:	b973      	cbnz	r3, 8000b3e <_svfiprintf_r+0x36>
 8000b20:	2140      	movs	r1, #64	@ 0x40
 8000b22:	f7ff ff09 	bl	8000938 <_malloc_r>
 8000b26:	6028      	str	r0, [r5, #0]
 8000b28:	6128      	str	r0, [r5, #16]
 8000b2a:	b930      	cbnz	r0, 8000b3a <_svfiprintf_r+0x32>
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	b01d      	add	sp, #116	@ 0x74
 8000b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	616b      	str	r3, [r5, #20]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b42:	2320      	movs	r3, #32
 8000b44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b4c:	2330      	movs	r3, #48	@ 0x30
 8000b4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cec <_svfiprintf_r+0x1e4>
 8000b52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b56:	f04f 0901 	mov.w	r9, #1
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b62:	b10a      	cbz	r2, 8000b68 <_svfiprintf_r+0x60>
 8000b64:	2a25      	cmp	r2, #37	@ 0x25
 8000b66:	d1f9      	bne.n	8000b5c <_svfiprintf_r+0x54>
 8000b68:	ebba 0b04 	subs.w	fp, sl, r4
 8000b6c:	d00b      	beq.n	8000b86 <_svfiprintf_r+0x7e>
 8000b6e:	465b      	mov	r3, fp
 8000b70:	4622      	mov	r2, r4
 8000b72:	4629      	mov	r1, r5
 8000b74:	4638      	mov	r0, r7
 8000b76:	f7ff ff6b 	bl	8000a50 <__ssputs_r>
 8000b7a:	3001      	adds	r0, #1
 8000b7c:	f000 80a7 	beq.w	8000cce <_svfiprintf_r+0x1c6>
 8000b80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b82:	445a      	add	r2, fp
 8000b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b86:	f89a 3000 	ldrb.w	r3, [sl]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 809f 	beq.w	8000cce <_svfiprintf_r+0x1c6>
 8000b90:	2300      	movs	r3, #0
 8000b92:	f04f 32ff 	mov.w	r2, #4294967295
 8000b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b9a:	f10a 0a01 	add.w	sl, sl, #1
 8000b9e:	9304      	str	r3, [sp, #16]
 8000ba0:	9307      	str	r3, [sp, #28]
 8000ba2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ba6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ba8:	4654      	mov	r4, sl
 8000baa:	2205      	movs	r2, #5
 8000bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb0:	484e      	ldr	r0, [pc, #312]	@ (8000cec <_svfiprintf_r+0x1e4>)
 8000bb2:	f7ff fb2d 	bl	8000210 <memchr>
 8000bb6:	9a04      	ldr	r2, [sp, #16]
 8000bb8:	b9d8      	cbnz	r0, 8000bf2 <_svfiprintf_r+0xea>
 8000bba:	06d0      	lsls	r0, r2, #27
 8000bbc:	bf44      	itt	mi
 8000bbe:	2320      	movmi	r3, #32
 8000bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bc4:	0711      	lsls	r1, r2, #28
 8000bc6:	bf44      	itt	mi
 8000bc8:	232b      	movmi	r3, #43	@ 0x2b
 8000bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bce:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd4:	d015      	beq.n	8000c02 <_svfiprintf_r+0xfa>
 8000bd6:	9a07      	ldr	r2, [sp, #28]
 8000bd8:	4654      	mov	r4, sl
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f04f 0c0a 	mov.w	ip, #10
 8000be0:	4621      	mov	r1, r4
 8000be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000be6:	3b30      	subs	r3, #48	@ 0x30
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	d94b      	bls.n	8000c84 <_svfiprintf_r+0x17c>
 8000bec:	b1b0      	cbz	r0, 8000c1c <_svfiprintf_r+0x114>
 8000bee:	9207      	str	r2, [sp, #28]
 8000bf0:	e014      	b.n	8000c1c <_svfiprintf_r+0x114>
 8000bf2:	eba0 0308 	sub.w	r3, r0, r8
 8000bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	9304      	str	r3, [sp, #16]
 8000bfe:	46a2      	mov	sl, r4
 8000c00:	e7d2      	b.n	8000ba8 <_svfiprintf_r+0xa0>
 8000c02:	9b03      	ldr	r3, [sp, #12]
 8000c04:	1d19      	adds	r1, r3, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	9103      	str	r1, [sp, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bfbb      	ittet	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	f042 0202 	orrlt.w	r2, r2, #2
 8000c14:	9307      	strge	r3, [sp, #28]
 8000c16:	9307      	strlt	r3, [sp, #28]
 8000c18:	bfb8      	it	lt
 8000c1a:	9204      	strlt	r2, [sp, #16]
 8000c1c:	7823      	ldrb	r3, [r4, #0]
 8000c1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c20:	d10a      	bne.n	8000c38 <_svfiprintf_r+0x130>
 8000c22:	7863      	ldrb	r3, [r4, #1]
 8000c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c26:	d132      	bne.n	8000c8e <_svfiprintf_r+0x186>
 8000c28:	9b03      	ldr	r3, [sp, #12]
 8000c2a:	1d1a      	adds	r2, r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	9203      	str	r2, [sp, #12]
 8000c30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c34:	3402      	adds	r4, #2
 8000c36:	9305      	str	r3, [sp, #20]
 8000c38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000cfc <_svfiprintf_r+0x1f4>
 8000c3c:	7821      	ldrb	r1, [r4, #0]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4650      	mov	r0, sl
 8000c42:	f7ff fae5 	bl	8000210 <memchr>
 8000c46:	b138      	cbz	r0, 8000c58 <_svfiprintf_r+0x150>
 8000c48:	9b04      	ldr	r3, [sp, #16]
 8000c4a:	eba0 000a 	sub.w	r0, r0, sl
 8000c4e:	2240      	movs	r2, #64	@ 0x40
 8000c50:	4082      	lsls	r2, r0
 8000c52:	4313      	orrs	r3, r2
 8000c54:	3401      	adds	r4, #1
 8000c56:	9304      	str	r3, [sp, #16]
 8000c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5c:	4824      	ldr	r0, [pc, #144]	@ (8000cf0 <_svfiprintf_r+0x1e8>)
 8000c5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c62:	2206      	movs	r2, #6
 8000c64:	f7ff fad4 	bl	8000210 <memchr>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d036      	beq.n	8000cda <_svfiprintf_r+0x1d2>
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <_svfiprintf_r+0x1ec>)
 8000c6e:	bb1b      	cbnz	r3, 8000cb8 <_svfiprintf_r+0x1b0>
 8000c70:	9b03      	ldr	r3, [sp, #12]
 8000c72:	3307      	adds	r3, #7
 8000c74:	f023 0307 	bic.w	r3, r3, #7
 8000c78:	3308      	adds	r3, #8
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c7e:	4433      	add	r3, r6
 8000c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c82:	e76a      	b.n	8000b5a <_svfiprintf_r+0x52>
 8000c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c88:	460c      	mov	r4, r1
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	e7a8      	b.n	8000be0 <_svfiprintf_r+0xd8>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	3401      	adds	r4, #1
 8000c92:	9305      	str	r3, [sp, #20]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 0c0a 	mov.w	ip, #10
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ca0:	3a30      	subs	r2, #48	@ 0x30
 8000ca2:	2a09      	cmp	r2, #9
 8000ca4:	d903      	bls.n	8000cae <_svfiprintf_r+0x1a6>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0c6      	beq.n	8000c38 <_svfiprintf_r+0x130>
 8000caa:	9105      	str	r1, [sp, #20]
 8000cac:	e7c4      	b.n	8000c38 <_svfiprintf_r+0x130>
 8000cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e7f0      	b.n	8000c9a <_svfiprintf_r+0x192>
 8000cb8:	ab03      	add	r3, sp, #12
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <_svfiprintf_r+0x1f0>)
 8000cc0:	a904      	add	r1, sp, #16
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	1c42      	adds	r2, r0, #1
 8000cca:	4606      	mov	r6, r0
 8000ccc:	d1d6      	bne.n	8000c7c <_svfiprintf_r+0x174>
 8000cce:	89ab      	ldrh	r3, [r5, #12]
 8000cd0:	065b      	lsls	r3, r3, #25
 8000cd2:	f53f af2d 	bmi.w	8000b30 <_svfiprintf_r+0x28>
 8000cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cd8:	e72c      	b.n	8000b34 <_svfiprintf_r+0x2c>
 8000cda:	ab03      	add	r3, sp, #12
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	462a      	mov	r2, r5
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <_svfiprintf_r+0x1f0>)
 8000ce2:	a904      	add	r1, sp, #16
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f000 f879 	bl	8000ddc <_printf_i>
 8000cea:	e7ed      	b.n	8000cc8 <_svfiprintf_r+0x1c0>
 8000cec:	08001152 	.word	0x08001152
 8000cf0:	0800115c 	.word	0x0800115c
 8000cf4:	00000000 	.word	0x00000000
 8000cf8:	08000a51 	.word	0x08000a51
 8000cfc:	08001158 	.word	0x08001158

08000d00 <_printf_common>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	4616      	mov	r6, r2
 8000d06:	4698      	mov	r8, r3
 8000d08:	688a      	ldr	r2, [r1, #8]
 8000d0a:	690b      	ldr	r3, [r1, #16]
 8000d0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	bfb8      	it	lt
 8000d14:	4613      	movlt	r3, r2
 8000d16:	6033      	str	r3, [r6, #0]
 8000d18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	b10a      	cbz	r2, 8000d26 <_printf_common+0x26>
 8000d22:	3301      	adds	r3, #1
 8000d24:	6033      	str	r3, [r6, #0]
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	0699      	lsls	r1, r3, #26
 8000d2a:	bf42      	ittt	mi
 8000d2c:	6833      	ldrmi	r3, [r6, #0]
 8000d2e:	3302      	addmi	r3, #2
 8000d30:	6033      	strmi	r3, [r6, #0]
 8000d32:	6825      	ldr	r5, [r4, #0]
 8000d34:	f015 0506 	ands.w	r5, r5, #6
 8000d38:	d106      	bne.n	8000d48 <_printf_common+0x48>
 8000d3a:	f104 0a19 	add.w	sl, r4, #25
 8000d3e:	68e3      	ldr	r3, [r4, #12]
 8000d40:	6832      	ldr	r2, [r6, #0]
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	dc26      	bgt.n	8000d96 <_printf_common+0x96>
 8000d48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d4c:	6822      	ldr	r2, [r4, #0]
 8000d4e:	3b00      	subs	r3, #0
 8000d50:	bf18      	it	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	0692      	lsls	r2, r2, #26
 8000d56:	d42b      	bmi.n	8000db0 <_printf_common+0xb0>
 8000d58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d5c:	4641      	mov	r1, r8
 8000d5e:	4638      	mov	r0, r7
 8000d60:	47c8      	blx	r9
 8000d62:	3001      	adds	r0, #1
 8000d64:	d01e      	beq.n	8000da4 <_printf_common+0xa4>
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	6922      	ldr	r2, [r4, #16]
 8000d6a:	f003 0306 	and.w	r3, r3, #6
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf02      	ittt	eq
 8000d72:	68e5      	ldreq	r5, [r4, #12]
 8000d74:	6833      	ldreq	r3, [r6, #0]
 8000d76:	1aed      	subeq	r5, r5, r3
 8000d78:	68a3      	ldr	r3, [r4, #8]
 8000d7a:	bf0c      	ite	eq
 8000d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d80:	2500      	movne	r5, #0
 8000d82:	4293      	cmp	r3, r2
 8000d84:	bfc4      	itt	gt
 8000d86:	1a9b      	subgt	r3, r3, r2
 8000d88:	18ed      	addgt	r5, r5, r3
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	341a      	adds	r4, #26
 8000d8e:	42b5      	cmp	r5, r6
 8000d90:	d11a      	bne.n	8000dc8 <_printf_common+0xc8>
 8000d92:	2000      	movs	r0, #0
 8000d94:	e008      	b.n	8000da8 <_printf_common+0xa8>
 8000d96:	2301      	movs	r3, #1
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4641      	mov	r1, r8
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	47c8      	blx	r9
 8000da0:	3001      	adds	r0, #1
 8000da2:	d103      	bne.n	8000dac <_printf_common+0xac>
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	3501      	adds	r5, #1
 8000dae:	e7c6      	b.n	8000d3e <_printf_common+0x3e>
 8000db0:	18e1      	adds	r1, r4, r3
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	2030      	movs	r0, #48	@ 0x30
 8000db6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dba:	4422      	add	r2, r4
 8000dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	e7c7      	b.n	8000d58 <_printf_common+0x58>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4622      	mov	r2, r4
 8000dcc:	4641      	mov	r1, r8
 8000dce:	4638      	mov	r0, r7
 8000dd0:	47c8      	blx	r9
 8000dd2:	3001      	adds	r0, #1
 8000dd4:	d0e6      	beq.n	8000da4 <_printf_common+0xa4>
 8000dd6:	3601      	adds	r6, #1
 8000dd8:	e7d9      	b.n	8000d8e <_printf_common+0x8e>
	...

08000ddc <_printf_i>:
 8000ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	7e0f      	ldrb	r7, [r1, #24]
 8000de2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000de4:	2f78      	cmp	r7, #120	@ 0x78
 8000de6:	4691      	mov	r9, r2
 8000de8:	4680      	mov	r8, r0
 8000dea:	460c      	mov	r4, r1
 8000dec:	469a      	mov	sl, r3
 8000dee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000df2:	d807      	bhi.n	8000e04 <_printf_i+0x28>
 8000df4:	2f62      	cmp	r7, #98	@ 0x62
 8000df6:	d80a      	bhi.n	8000e0e <_printf_i+0x32>
 8000df8:	2f00      	cmp	r7, #0
 8000dfa:	f000 80d2 	beq.w	8000fa2 <_printf_i+0x1c6>
 8000dfe:	2f58      	cmp	r7, #88	@ 0x58
 8000e00:	f000 80b9 	beq.w	8000f76 <_printf_i+0x19a>
 8000e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e0c:	e03a      	b.n	8000e84 <_printf_i+0xa8>
 8000e0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e12:	2b15      	cmp	r3, #21
 8000e14:	d8f6      	bhi.n	8000e04 <_printf_i+0x28>
 8000e16:	a101      	add	r1, pc, #4	@ (adr r1, 8000e1c <_printf_i+0x40>)
 8000e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e1c:	08000e75 	.word	0x08000e75
 8000e20:	08000e89 	.word	0x08000e89
 8000e24:	08000e05 	.word	0x08000e05
 8000e28:	08000e05 	.word	0x08000e05
 8000e2c:	08000e05 	.word	0x08000e05
 8000e30:	08000e05 	.word	0x08000e05
 8000e34:	08000e89 	.word	0x08000e89
 8000e38:	08000e05 	.word	0x08000e05
 8000e3c:	08000e05 	.word	0x08000e05
 8000e40:	08000e05 	.word	0x08000e05
 8000e44:	08000e05 	.word	0x08000e05
 8000e48:	08000f89 	.word	0x08000f89
 8000e4c:	08000eb3 	.word	0x08000eb3
 8000e50:	08000f43 	.word	0x08000f43
 8000e54:	08000e05 	.word	0x08000e05
 8000e58:	08000e05 	.word	0x08000e05
 8000e5c:	08000fab 	.word	0x08000fab
 8000e60:	08000e05 	.word	0x08000e05
 8000e64:	08000eb3 	.word	0x08000eb3
 8000e68:	08000e05 	.word	0x08000e05
 8000e6c:	08000e05 	.word	0x08000e05
 8000e70:	08000f4b 	.word	0x08000f4b
 8000e74:	6833      	ldr	r3, [r6, #0]
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6032      	str	r2, [r6, #0]
 8000e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e84:	2301      	movs	r3, #1
 8000e86:	e09d      	b.n	8000fc4 <_printf_i+0x1e8>
 8000e88:	6833      	ldr	r3, [r6, #0]
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	1d19      	adds	r1, r3, #4
 8000e8e:	6031      	str	r1, [r6, #0]
 8000e90:	0606      	lsls	r6, r0, #24
 8000e92:	d501      	bpl.n	8000e98 <_printf_i+0xbc>
 8000e94:	681d      	ldr	r5, [r3, #0]
 8000e96:	e003      	b.n	8000ea0 <_printf_i+0xc4>
 8000e98:	0645      	lsls	r5, r0, #25
 8000e9a:	d5fb      	bpl.n	8000e94 <_printf_i+0xb8>
 8000e9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	da03      	bge.n	8000eac <_printf_i+0xd0>
 8000ea4:	232d      	movs	r3, #45	@ 0x2d
 8000ea6:	426d      	negs	r5, r5
 8000ea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eac:	4859      	ldr	r0, [pc, #356]	@ (8001014 <_printf_i+0x238>)
 8000eae:	230a      	movs	r3, #10
 8000eb0:	e011      	b.n	8000ed6 <_printf_i+0xfa>
 8000eb2:	6821      	ldr	r1, [r4, #0]
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	0608      	lsls	r0, r1, #24
 8000eb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ebc:	d402      	bmi.n	8000ec4 <_printf_i+0xe8>
 8000ebe:	0649      	lsls	r1, r1, #25
 8000ec0:	bf48      	it	mi
 8000ec2:	b2ad      	uxthmi	r5, r5
 8000ec4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ec6:	4853      	ldr	r0, [pc, #332]	@ (8001014 <_printf_i+0x238>)
 8000ec8:	6033      	str	r3, [r6, #0]
 8000eca:	bf14      	ite	ne
 8000ecc:	230a      	movne	r3, #10
 8000ece:	2308      	moveq	r3, #8
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ed6:	6866      	ldr	r6, [r4, #4]
 8000ed8:	60a6      	str	r6, [r4, #8]
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	bfa2      	ittt	ge
 8000ede:	6821      	ldrge	r1, [r4, #0]
 8000ee0:	f021 0104 	bicge.w	r1, r1, #4
 8000ee4:	6021      	strge	r1, [r4, #0]
 8000ee6:	b90d      	cbnz	r5, 8000eec <_printf_i+0x110>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d04b      	beq.n	8000f84 <_printf_i+0x1a8>
 8000eec:	4616      	mov	r6, r2
 8000eee:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ef2:	fb03 5711 	mls	r7, r3, r1, r5
 8000ef6:	5dc7      	ldrb	r7, [r0, r7]
 8000ef8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000efc:	462f      	mov	r7, r5
 8000efe:	42bb      	cmp	r3, r7
 8000f00:	460d      	mov	r5, r1
 8000f02:	d9f4      	bls.n	8000eee <_printf_i+0x112>
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d10b      	bne.n	8000f20 <_printf_i+0x144>
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	07df      	lsls	r7, r3, #31
 8000f0c:	d508      	bpl.n	8000f20 <_printf_i+0x144>
 8000f0e:	6923      	ldr	r3, [r4, #16]
 8000f10:	6861      	ldr	r1, [r4, #4]
 8000f12:	4299      	cmp	r1, r3
 8000f14:	bfde      	ittt	le
 8000f16:	2330      	movle	r3, #48	@ 0x30
 8000f18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f20:	1b92      	subs	r2, r2, r6
 8000f22:	6122      	str	r2, [r4, #16]
 8000f24:	f8cd a000 	str.w	sl, [sp]
 8000f28:	464b      	mov	r3, r9
 8000f2a:	aa03      	add	r2, sp, #12
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4640      	mov	r0, r8
 8000f30:	f7ff fee6 	bl	8000d00 <_printf_common>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d14a      	bne.n	8000fce <_printf_i+0x1f2>
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	b004      	add	sp, #16
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	4833      	ldr	r0, [pc, #204]	@ (8001018 <_printf_i+0x23c>)
 8000f4c:	2778      	movs	r7, #120	@ 0x78
 8000f4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	6831      	ldr	r1, [r6, #0]
 8000f56:	061f      	lsls	r7, r3, #24
 8000f58:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f5c:	d402      	bmi.n	8000f64 <_printf_i+0x188>
 8000f5e:	065f      	lsls	r7, r3, #25
 8000f60:	bf48      	it	mi
 8000f62:	b2ad      	uxthmi	r5, r5
 8000f64:	6031      	str	r1, [r6, #0]
 8000f66:	07d9      	lsls	r1, r3, #31
 8000f68:	bf44      	itt	mi
 8000f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8000f6e:	6023      	strmi	r3, [r4, #0]
 8000f70:	b11d      	cbz	r5, 8000f7a <_printf_i+0x19e>
 8000f72:	2310      	movs	r3, #16
 8000f74:	e7ac      	b.n	8000ed0 <_printf_i+0xf4>
 8000f76:	4827      	ldr	r0, [pc, #156]	@ (8001014 <_printf_i+0x238>)
 8000f78:	e7e9      	b.n	8000f4e <_printf_i+0x172>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	f023 0320 	bic.w	r3, r3, #32
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	e7f6      	b.n	8000f72 <_printf_i+0x196>
 8000f84:	4616      	mov	r6, r2
 8000f86:	e7bd      	b.n	8000f04 <_printf_i+0x128>
 8000f88:	6833      	ldr	r3, [r6, #0]
 8000f8a:	6825      	ldr	r5, [r4, #0]
 8000f8c:	6961      	ldr	r1, [r4, #20]
 8000f8e:	1d18      	adds	r0, r3, #4
 8000f90:	6030      	str	r0, [r6, #0]
 8000f92:	062e      	lsls	r6, r5, #24
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	d501      	bpl.n	8000f9c <_printf_i+0x1c0>
 8000f98:	6019      	str	r1, [r3, #0]
 8000f9a:	e002      	b.n	8000fa2 <_printf_i+0x1c6>
 8000f9c:	0668      	lsls	r0, r5, #25
 8000f9e:	d5fb      	bpl.n	8000f98 <_printf_i+0x1bc>
 8000fa0:	8019      	strh	r1, [r3, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	6123      	str	r3, [r4, #16]
 8000fa6:	4616      	mov	r6, r2
 8000fa8:	e7bc      	b.n	8000f24 <_printf_i+0x148>
 8000faa:	6833      	ldr	r3, [r6, #0]
 8000fac:	1d1a      	adds	r2, r3, #4
 8000fae:	6032      	str	r2, [r6, #0]
 8000fb0:	681e      	ldr	r6, [r3, #0]
 8000fb2:	6862      	ldr	r2, [r4, #4]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff f92a 	bl	8000210 <memchr>
 8000fbc:	b108      	cbz	r0, 8000fc2 <_printf_i+0x1e6>
 8000fbe:	1b80      	subs	r0, r0, r6
 8000fc0:	6060      	str	r0, [r4, #4]
 8000fc2:	6863      	ldr	r3, [r4, #4]
 8000fc4:	6123      	str	r3, [r4, #16]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fcc:	e7aa      	b.n	8000f24 <_printf_i+0x148>
 8000fce:	6923      	ldr	r3, [r4, #16]
 8000fd0:	4632      	mov	r2, r6
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	47d0      	blx	sl
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d0ad      	beq.n	8000f38 <_printf_i+0x15c>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	079b      	lsls	r3, r3, #30
 8000fe0:	d413      	bmi.n	800100a <_printf_i+0x22e>
 8000fe2:	68e0      	ldr	r0, [r4, #12]
 8000fe4:	9b03      	ldr	r3, [sp, #12]
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	bfb8      	it	lt
 8000fea:	4618      	movlt	r0, r3
 8000fec:	e7a6      	b.n	8000f3c <_printf_i+0x160>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4632      	mov	r2, r6
 8000ff2:	4649      	mov	r1, r9
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	47d0      	blx	sl
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	d09d      	beq.n	8000f38 <_printf_i+0x15c>
 8000ffc:	3501      	adds	r5, #1
 8000ffe:	68e3      	ldr	r3, [r4, #12]
 8001000:	9903      	ldr	r1, [sp, #12]
 8001002:	1a5b      	subs	r3, r3, r1
 8001004:	42ab      	cmp	r3, r5
 8001006:	dcf2      	bgt.n	8000fee <_printf_i+0x212>
 8001008:	e7eb      	b.n	8000fe2 <_printf_i+0x206>
 800100a:	2500      	movs	r5, #0
 800100c:	f104 0619 	add.w	r6, r4, #25
 8001010:	e7f5      	b.n	8000ffe <_printf_i+0x222>
 8001012:	bf00      	nop
 8001014:	08001163 	.word	0x08001163
 8001018:	08001174 	.word	0x08001174

0800101c <memmove>:
 800101c:	4288      	cmp	r0, r1
 800101e:	b510      	push	{r4, lr}
 8001020:	eb01 0402 	add.w	r4, r1, r2
 8001024:	d902      	bls.n	800102c <memmove+0x10>
 8001026:	4284      	cmp	r4, r0
 8001028:	4623      	mov	r3, r4
 800102a:	d807      	bhi.n	800103c <memmove+0x20>
 800102c:	1e43      	subs	r3, r0, #1
 800102e:	42a1      	cmp	r1, r4
 8001030:	d008      	beq.n	8001044 <memmove+0x28>
 8001032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800103a:	e7f8      	b.n	800102e <memmove+0x12>
 800103c:	4402      	add	r2, r0
 800103e:	4601      	mov	r1, r0
 8001040:	428a      	cmp	r2, r1
 8001042:	d100      	bne.n	8001046 <memmove+0x2a>
 8001044:	bd10      	pop	{r4, pc}
 8001046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800104a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800104e:	e7f7      	b.n	8001040 <memmove+0x24>

08001050 <_sbrk_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d06      	ldr	r5, [pc, #24]	@ (800106c <_sbrk_r+0x1c>)
 8001054:	2300      	movs	r3, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	f7ff fb54 	bl	8000708 <_sbrk>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_sbrk_r+0x1a>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_sbrk_r+0x1a>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200001a8 	.word	0x200001a8

08001070 <memcpy>:
 8001070:	440a      	add	r2, r1
 8001072:	4291      	cmp	r1, r2
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295
 8001078:	d100      	bne.n	800107c <memcpy+0xc>
 800107a:	4770      	bx	lr
 800107c:	b510      	push	{r4, lr}
 800107e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001086:	4291      	cmp	r1, r2
 8001088:	d1f9      	bne.n	800107e <memcpy+0xe>
 800108a:	bd10      	pop	{r4, pc}

0800108c <_realloc_r>:
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	4680      	mov	r8, r0
 8001092:	4615      	mov	r5, r2
 8001094:	460c      	mov	r4, r1
 8001096:	b921      	cbnz	r1, 80010a2 <_realloc_r+0x16>
 8001098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	4611      	mov	r1, r2
 800109e:	f7ff bc4b 	b.w	8000938 <_malloc_r>
 80010a2:	b92a      	cbnz	r2, 80010b0 <_realloc_r+0x24>
 80010a4:	f7ff fbdc 	bl	8000860 <_free_r>
 80010a8:	2400      	movs	r4, #0
 80010aa:	4620      	mov	r0, r4
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010b0:	f000 f81a 	bl	80010e8 <_malloc_usable_size_r>
 80010b4:	4285      	cmp	r5, r0
 80010b6:	4606      	mov	r6, r0
 80010b8:	d802      	bhi.n	80010c0 <_realloc_r+0x34>
 80010ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80010be:	d8f4      	bhi.n	80010aa <_realloc_r+0x1e>
 80010c0:	4629      	mov	r1, r5
 80010c2:	4640      	mov	r0, r8
 80010c4:	f7ff fc38 	bl	8000938 <_malloc_r>
 80010c8:	4607      	mov	r7, r0
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d0ec      	beq.n	80010a8 <_realloc_r+0x1c>
 80010ce:	42b5      	cmp	r5, r6
 80010d0:	462a      	mov	r2, r5
 80010d2:	4621      	mov	r1, r4
 80010d4:	bf28      	it	cs
 80010d6:	4632      	movcs	r2, r6
 80010d8:	f7ff ffca 	bl	8001070 <memcpy>
 80010dc:	4621      	mov	r1, r4
 80010de:	4640      	mov	r0, r8
 80010e0:	f7ff fbbe 	bl	8000860 <_free_r>
 80010e4:	463c      	mov	r4, r7
 80010e6:	e7e0      	b.n	80010aa <_realloc_r+0x1e>

080010e8 <_malloc_usable_size_r>:
 80010e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010ec:	1f18      	subs	r0, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfbc      	itt	lt
 80010f2:	580b      	ldrlt	r3, [r1, r0]
 80010f4:	18c0      	addlt	r0, r0, r3
 80010f6:	4770      	bx	lr

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
