
TIM3_output_compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001cc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000450  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f7  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a5c  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000613  00000000  00000000  0001a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0fb  00000000  00000000  0001aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000098  00000000  00000000  000a5b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000a5be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000378 	.word	0x08000378

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000378 	.word	0x08000378

08000204 <main>:

void pa6_tim3_ch1_init(void);
void tim3_output_compare_init(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	pa6_tim3_ch1_init();
 8000208:	f000 f804 	bl	8000214 <pa6_tim3_ch1_init>
	tim3_output_compare_init();
 800020c:	f000 f82c 	bl	8000268 <tim3_output_compare_init>

	while(1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0xc>

08000214 <pa6_tim3_ch1_init>:
	}

}

void pa6_tim3_ch1_init(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	//enable gpioa clock
	RCC->AHB1ENR |= GPIOAEN;
 8000218:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <pa6_tim3_ch1_init+0x4c>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	4a10      	ldr	r2, [pc, #64]	@ (8000260 <pa6_tim3_ch1_init+0x4c>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	@ 0x30

	//configure mode register as alternate func for pa6
	GPIOA->MODER &= ~(3U<<(2 * 6));
 8000224:	4b0f      	ldr	r3, [pc, #60]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 800022a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U<<(2 * 6));
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a0b      	ldr	r2, [pc, #44]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 8000236:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800023a:	6013      	str	r3, [r2, #0]


	//AF2 for tim3-ch1
	GPIOA->AFR[0] &= ~(0xF << (4 * 6));
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 8000242:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000246:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (2U<<(4 * 6));
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <pa6_tim3_ch1_init+0x50>)
 800024e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000252:	6213      	str	r3, [r2, #32]

}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000

08000268 <tim3_output_compare_init>:

void tim3_output_compare_init(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	//enable TIM3 clock
	RCC->APB1ENR |= TIM3EN;
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <tim3_output_compare_init+0x6c>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000270:	4a18      	ldr	r2, [pc, #96]	@ (80002d4 <tim3_output_compare_init+0x6c>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6413      	str	r3, [r2, #64]	@ 0x40

	//Set prescaler and ARR for frequency
	TIM3->PSC = 1600 - 1; // 16 MHz / 1600 = 10 kHz timer clock
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <tim3_output_compare_init+0x70>)
 800027a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800027e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 40 - 1; // Timer overflows every 1 second
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <tim3_output_compare_init+0x70>)
 8000282:	2227      	movs	r2, #39	@ 0x27
 8000284:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set output compare value (initial match)
	TIM3->CCR1 = 20; // Match after 0.5s to toggle
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <tim3_output_compare_init+0x70>)
 8000288:	2214      	movs	r2, #20
 800028a:	635a      	str	r2, [r3, #52]	@ 0x34

	// OC1M = 011: Toggle on match
	TIM3->CCMR1 &= ~(0x7 << 4);
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <tim3_output_compare_init+0x70>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <tim3_output_compare_init+0x70>)
 8000292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000296:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (0x3 << 4);
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <tim3_output_compare_init+0x70>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a0e      	ldr	r2, [pc, #56]	@ (80002d8 <tim3_output_compare_init+0x70>)
 800029e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002a2:	6193      	str	r3, [r2, #24]

	// Enable preload for CCR1
	TIM3->CCMR1 |= (1U << 3);
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]

	// Enable channel 1 output compare
	TIM3->CCER |= (1U << 0);
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6213      	str	r3, [r2, #32]

	// Enable counter
	TIM3->CR1 |= (1U << 0);
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <tim3_output_compare_init+0x70>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6013      	str	r3, [r2, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40000400 	.word	0x40000400

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	@ (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff79 	bl	8000204 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	@ (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	@ (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	@ (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	@ (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
