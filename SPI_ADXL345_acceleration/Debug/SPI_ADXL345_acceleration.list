
SPI_ADXL345_acceleration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080010a4  080010a4  000020a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001134  08001134  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001134  08001134  00002134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800113c  0800113c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800113c  0800113c  0000213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001140  08001140  00002140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001144  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001194  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001194  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007be  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b0  00000000  00000000  0000383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00003af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000078  00000000  00000000  00003ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019948  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec0  00000000  00000000  0001d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0a6  00000000  00000000  0001e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad4c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000708  00000000  00000000  000ad50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000adc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800108c 	.word	0x0800108c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	0800108c 	.word	0x0800108c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void uart2_write(char c);
void uart2_print(const char* s);


int main()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b096      	sub	sp, #88	@ 0x58
 80002b4:	af02      	add	r7, sp, #8
	int16_t x, y, z;
	char buffer[64];

	spi1_gpio_init();
 80002b6:	f000 f84f 	bl	8000358 <spi1_gpio_init>
	spi1_init();
 80002ba:	f000 f885 	bl	80003c8 <spi1_init>
	uart2_init();
 80002be:	f000 f97d 	bl	80005bc <uart2_init>

	uart2_print("ADXL345 ccccc\r\n");
 80002c2:	4820      	ldr	r0, [pc, #128]	@ (8000344 <main+0x94>)
 80002c4:	f000 f9d4 	bl	8000670 <uart2_print>

	// Put ADXL345 in measurement mode
	adxl345_write(ADXL345_POWER_CTL, 0x08);
 80002c8:	2108      	movs	r1, #8
 80002ca:	202d      	movs	r0, #45	@ 0x2d
 80002cc:	f000 f8dc 	bl	8000488 <adxl345_write>

	// Read and verify device ID
	uint8_t devid = adxl345_read_register(ADXL345_DEVID_REG);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 f8ff 	bl	80004d4 <adxl345_read_register>
 80002d6:	4603      	mov	r3, r0
 80002d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (devid == 0xE5)
 80002dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80002e0:	2be5      	cmp	r3, #229	@ 0xe5
 80002e2:	d103      	bne.n	80002ec <main+0x3c>
		uart2_print("ADXL345 detected via SPI!\r\n");
 80002e4:	4818      	ldr	r0, [pc, #96]	@ (8000348 <main+0x98>)
 80002e6:	f000 f9c3 	bl	8000670 <uart2_print>
 80002ea:	e002      	b.n	80002f2 <main+0x42>
	else
		uart2_print("Device ID mismatch!\r\n");
 80002ec:	4817      	ldr	r0, [pc, #92]	@ (800034c <main+0x9c>)
 80002ee:	f000 f9bf 	bl	8000670 <uart2_print>

	while(1)
	{
		adxl345_read_xyz(&x, &y, &z);
 80002f2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80002f6:	f107 014a 	add.w	r1, r7, #74	@ 0x4a
 80002fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f912 	bl	8000528 <adxl345_read_xyz>

		sprintf(buffer, "X: %d  Y: %d  Z: %d\r\n", x, y, z);
 8000304:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000308:	461a      	mov	r2, r3
 800030a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800030e:	4619      	mov	r1, r3
 8000310:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8000314:	f107 0008 	add.w	r0, r7, #8
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	460b      	mov	r3, r1
 800031c:	490c      	ldr	r1, [pc, #48]	@ (8000350 <main+0xa0>)
 800031e:	f000 fa1d 	bl	800075c <siprintf>
		uart2_print(buffer);
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f9a2 	bl	8000670 <uart2_print>

		for (volatile int i = 0; i < 100000; i++); // Delay
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	e002      	b.n	8000338 <main+0x88>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a06      	ldr	r2, [pc, #24]	@ (8000354 <main+0xa4>)
 800033c:	4293      	cmp	r3, r2
 800033e:	ddf8      	ble.n	8000332 <main+0x82>
		adxl345_read_xyz(&x, &y, &z);
 8000340:	e7d7      	b.n	80002f2 <main+0x42>
 8000342:	bf00      	nop
 8000344:	080010a4 	.word	0x080010a4
 8000348:	080010b4 	.word	0x080010b4
 800034c:	080010d0 	.word	0x080010d0
 8000350:	080010e8 	.word	0x080010e8
 8000354:	0001869f 	.word	0x0001869f

08000358 <spi1_gpio_init>:
 * PA5 - SCLK
 * PA6 MISO
 * PA7 MOSI
 * alternative AF5*/
void spi1_gpio_init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	//enable GPIOA clock
	RCC->AHB1ENR |= (1U<<0);
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <spi1_gpio_init+0x68>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a17      	ldr	r2, [pc, #92]	@ (80003c0 <spi1_gpio_init+0x68>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30

	//alternative mode
	GPIOA->MODER &= ~((3U<<(2*4)) | (3U<<(2*5)) | (3U<<(2*6)) | (3U<<(2*7)));
 8000368:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800036e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000372:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((2U<<(2*5)) | (2U<<(2*6)) | (2U<<(2*7))); //alternative mode
 8000374:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <spi1_gpio_init+0x6c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a12      	ldr	r2, [pc, #72]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800037a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<(2*4)); // as output
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <spi1_gpio_init+0x6c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0f      	ldr	r2, [pc, #60]	@ (80003c4 <spi1_gpio_init+0x6c>)
 8000386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800038a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF<<(4*5)) | (0xF<<(4*6)) | (0xF<<(4*7)));
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a0c      	ldr	r2, [pc, #48]	@ (80003c4 <spi1_gpio_init+0x6c>)
 8000392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((5U<<(4*5)) | (5U<<(4*6)) | (5U<<(4*7)));
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a09      	ldr	r2, [pc, #36]	@ (80003c4 <spi1_gpio_init+0x6c>)
 800039e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80003a2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80003a6:	6213      	str	r3, [r2, #32]

	CS_HIGH();
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <spi1_gpio_init+0x6c>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <spi1_gpio_init+0x6c>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	6153      	str	r3, [r2, #20]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023800 	.word	0x40023800
 80003c4:	40020000 	.word	0x40020000

080003c8 <spi1_init>:

void spi1_init(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	//enable SPI1 clock
	RCC->APB2ENR |= (1U<<12);
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <spi1_init+0x74>)
 80003ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d0:	4a1a      	ldr	r2, [pc, #104]	@ (800043c <spi1_init+0x74>)
 80003d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003d6:	6453      	str	r3, [r2, #68]	@ 0x44

	SPI1->CR1 = 0;
 80003d8:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <spi1_init+0x78>)
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (1U<<2); //master mode
 80003de:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <spi1_init+0x78>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <spi1_init+0x78>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<1); //CPOL = 1 (idle high)
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <spi1_init+0x78>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a14      	ldr	r2, [pc, #80]	@ (8000440 <spi1_init+0x78>)
 80003f0:	f043 0302 	orr.w	r3, r3, #2
 80003f4:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<0); //CPHA = 1 (data capture on trailing edge)
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <spi1_init+0x78>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <spi1_init+0x78>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (7U<<3); // fPCLK/256 clock frequency
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <spi1_init+0x78>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <spi1_init+0x78>)
 8000408:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800040c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<9); //Software slave management
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <spi1_init+0x78>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <spi1_init+0x78>)
 8000414:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000418:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<8); //Internal slave select
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <spi1_init+0x78>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <spi1_init+0x78>)
 8000420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000424:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<6); //SPI1 peripheral enable
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <spi1_init+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <spi1_init+0x78>)
 800042c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800
 8000440:	40013000 	.word	0x40013000

08000444 <spi1_transfer>:

uint8_t spi1_transfer(uint8_t data)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & (1U<<1))); //wait for TXE
 800044e:	bf00      	nop
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <spi1_transfer+0x40>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f9      	beq.n	8000450 <spi1_transfer+0xc>
	SPI1->DR = data;
 800045c:	4a09      	ldr	r2, [pc, #36]	@ (8000484 <spi1_transfer+0x40>)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	60d3      	str	r3, [r2, #12]

	while(!(SPI1->SR & (1U<<0))); //wait for RXNE
 8000462:	bf00      	nop
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <spi1_transfer+0x40>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <spi1_transfer+0x20>

	return (SPI1->DR);
 8000470:	4b04      	ldr	r3, [pc, #16]	@ (8000484 <spi1_transfer+0x40>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40013000 	.word	0x40013000

08000488 <adxl345_write>:

void adxl345_write(uint8_t reg, uint8_t value)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	460a      	mov	r2, r1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	4613      	mov	r3, r2
 8000496:	71bb      	strb	r3, [r7, #6]
    CS_LOW();
 8000498:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <adxl345_write+0x48>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a0c      	ldr	r2, [pc, #48]	@ (80004d0 <adxl345_write+0x48>)
 800049e:	f023 0310 	bic.w	r3, r3, #16
 80004a2:	6153      	str	r3, [r2, #20]
    spi1_transfer(reg & 0x3F); // Bit 7 = 0 for write
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ffc9 	bl	8000444 <spi1_transfer>
    spi1_transfer(value);
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ffc5 	bl	8000444 <spi1_transfer>
    CS_HIGH();
 80004ba:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <adxl345_write+0x48>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <adxl345_write+0x48>)
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	6153      	str	r3, [r2, #20]
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40020000 	.word	0x40020000

080004d4 <adxl345_read_register>:

uint8_t adxl345_read_register(uint8_t reg)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	CS_LOW();
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <adxl345_read_register+0x50>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <adxl345_read_register+0x50>)
 80004e4:	f023 0310 	bic.w	r3, r3, #16
 80004e8:	6153      	str	r3, [r2, #20]

	spi1_transfer(0x80 | (reg & 0x3F));// Bit 7 = 1 (read), Bit 6 = 0 (single-byte)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffa1 	bl	8000444 <spi1_transfer>
									//according to ADXL345 datasheet — SPI Communication Protocol
	value = spi1_transfer(0x00);
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff ff9e 	bl	8000444 <spi1_transfer>
 8000508:	4603      	mov	r3, r0
 800050a:	73fb      	strb	r3, [r7, #15]
	CS_HIGH();
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <adxl345_read_register+0x50>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <adxl345_read_register+0x50>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6153      	str	r3, [r2, #20]

	return value;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40020000 	.word	0x40020000

08000528 <adxl345_read_xyz>:

void adxl345_read_xyz(int16_t* x , int16_t* y , int16_t* z)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	uint8_t buffer[6];

	CS_LOW();
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <adxl345_read_xyz+0x90>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a1f      	ldr	r2, [pc, #124]	@ (80005b8 <adxl345_read_xyz+0x90>)
 800053a:	f023 0310 	bic.w	r3, r3, #16
 800053e:	6153      	str	r3, [r2, #20]

    // Read command: Bit 7 = 1 (read), Bit 6 = 1 (multi-byte)
	spi1_transfer(0xC0 | (ADXL345_DATAX0 & 0x3F)); // 0x32 = start register
 8000540:	20f2      	movs	r0, #242	@ 0xf2
 8000542:	f7ff ff7f 	bl	8000444 <spi1_transfer>

	for(int i = 0 ; i<6 ; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	e00d      	b.n	8000568 <adxl345_read_xyz+0x40>
		buffer[i] = spi1_transfer(0x00); // Dummy write to read
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff79 	bl	8000444 <spi1_transfer>
 8000552:	4603      	mov	r3, r0
 8000554:	4619      	mov	r1, r3
 8000556:	f107 0214 	add.w	r2, r7, #20
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4413      	add	r3, r2
 800055e:	460a      	mov	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<6 ; i++)
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	3301      	adds	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	2b05      	cmp	r3, #5
 800056c:	ddee      	ble.n	800054c <adxl345_read_xyz+0x24>

	CS_HIGH();
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <adxl345_read_xyz+0x90>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <adxl345_read_xyz+0x90>)
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	6153      	str	r3, [r2, #20]

	*x = (int16_t)((buffer[1] << 8) | buffer[0]);
 800057a:	7d7b      	ldrb	r3, [r7, #21]
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	b21a      	sxth	r2, r3
 8000580:	7d3b      	ldrb	r3, [r7, #20]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((buffer[3] << 8) | buffer[2]);
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	7dbb      	ldrb	r3, [r7, #22]
 8000594:	b21b      	sxth	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b21a      	sxth	r2, r3
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800059e:	7e7b      	ldrb	r3, [r7, #25]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	7e3b      	ldrb	r3, [r7, #24]
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	801a      	strh	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000

080005bc <uart2_init>:

// === UART2 CONFIG + FUNCTIONS ===
// PA2 -> TX
void uart2_init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1U<<0);
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <uart2_init+0x78>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000634 <uart2_init+0x78>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= (1U<<17);
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <uart2_init+0x78>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <uart2_init+0x78>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~(3U << (2*2));
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <uart2_init+0x7c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a16      	ldr	r2, [pc, #88]	@ (8000638 <uart2_init+0x7c>)
 80005de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << (2*2)); // AF mode for PA2
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <uart2_init+0x7c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <uart2_init+0x7c>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << (4*2));
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <uart2_init+0x7c>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <uart2_init+0x7c>)
 80005f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80005fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (7U << (4*2)); // AF7 (USART2)
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <uart2_init+0x7c>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <uart2_init+0x7c>)
 8000602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000606:	6213      	str	r3, [r2, #32]

    USART2->BRR = 0x0683; // 9600 @ 16MHz
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <uart2_init+0x80>)
 800060a:	f240 6283 	movw	r2, #1667	@ 0x683
 800060e:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= (1U << 3);  // TE
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <uart2_init+0x80>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a09      	ldr	r2, [pc, #36]	@ (800063c <uart2_init+0x80>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1U << 13); // UE
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <uart2_init+0x80>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <uart2_init+0x80>)
 8000622:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000
 800063c:	40004400 	.word	0x40004400

08000640 <uart2_write>:

void uart2_write(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & (1U << 7))); // Wait for TXE
 800064a:	bf00      	nop
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <uart2_write+0x2c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f9      	beq.n	800064c <uart2_write+0xc>
    USART2->DR = c;
 8000658:	4a04      	ldr	r2, [pc, #16]	@ (800066c <uart2_write+0x2c>)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	6053      	str	r3, [r2, #4]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400

08000670 <uart2_print>:

void uart2_print(const char* s)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    while (*s)
 8000678:	e006      	b.n	8000688 <uart2_print+0x18>
        uart2_write(*s++);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffdc 	bl	8000640 <uart2_write>
    while (*s)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <uart2_print+0xa>
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f000 f866 	bl	800079c <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20020000 	.word	0x20020000
 80006fc:	00000400 	.word	0x00000400
 8000700:	2000006c 	.word	0x2000006c
 8000704:	200001b8 	.word	0x200001b8

08000708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	@ (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800070c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	@ (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	@ (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000736:	f000 f837 	bl	80007a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fdb9 	bl	80002b0 <main>

0800073e <LoopForever>:

LoopForever:
  b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800074c:	08001144 	.word	0x08001144
  ldr r2, =_sbss
 8000750:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000754:	200001b8 	.word	0x200001b8

08000758 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <siprintf>:
 800075c:	b40e      	push	{r1, r2, r3}
 800075e:	b500      	push	{lr}
 8000760:	b09c      	sub	sp, #112	@ 0x70
 8000762:	ab1d      	add	r3, sp, #116	@ 0x74
 8000764:	9002      	str	r0, [sp, #8]
 8000766:	9006      	str	r0, [sp, #24]
 8000768:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <siprintf+0x38>)
 800076e:	9107      	str	r1, [sp, #28]
 8000770:	9104      	str	r1, [sp, #16]
 8000772:	4909      	ldr	r1, [pc, #36]	@ (8000798 <siprintf+0x3c>)
 8000774:	f853 2b04 	ldr.w	r2, [r3], #4
 8000778:	9105      	str	r1, [sp, #20]
 800077a:	6800      	ldr	r0, [r0, #0]
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	a902      	add	r1, sp, #8
 8000780:	f000 f98c 	bl	8000a9c <_svfiprintf_r>
 8000784:	9b02      	ldr	r3, [sp, #8]
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	b01c      	add	sp, #112	@ 0x70
 800078c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000790:	b003      	add	sp, #12
 8000792:	4770      	bx	lr
 8000794:	20000000 	.word	0x20000000
 8000798:	ffff0208 	.word	0xffff0208

0800079c <__errno>:
 800079c:	4b01      	ldr	r3, [pc, #4]	@ (80007a4 <__errno+0x8>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000

080007a8 <__libc_init_array>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	4d0d      	ldr	r5, [pc, #52]	@ (80007e0 <__libc_init_array+0x38>)
 80007ac:	4c0d      	ldr	r4, [pc, #52]	@ (80007e4 <__libc_init_array+0x3c>)
 80007ae:	1b64      	subs	r4, r4, r5
 80007b0:	10a4      	asrs	r4, r4, #2
 80007b2:	2600      	movs	r6, #0
 80007b4:	42a6      	cmp	r6, r4
 80007b6:	d109      	bne.n	80007cc <__libc_init_array+0x24>
 80007b8:	4d0b      	ldr	r5, [pc, #44]	@ (80007e8 <__libc_init_array+0x40>)
 80007ba:	4c0c      	ldr	r4, [pc, #48]	@ (80007ec <__libc_init_array+0x44>)
 80007bc:	f000 fc66 	bl	800108c <_init>
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	10a4      	asrs	r4, r4, #2
 80007c4:	2600      	movs	r6, #0
 80007c6:	42a6      	cmp	r6, r4
 80007c8:	d105      	bne.n	80007d6 <__libc_init_array+0x2e>
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d0:	4798      	blx	r3
 80007d2:	3601      	adds	r6, #1
 80007d4:	e7ee      	b.n	80007b4 <__libc_init_array+0xc>
 80007d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007da:	4798      	blx	r3
 80007dc:	3601      	adds	r6, #1
 80007de:	e7f2      	b.n	80007c6 <__libc_init_array+0x1e>
 80007e0:	0800113c 	.word	0x0800113c
 80007e4:	0800113c 	.word	0x0800113c
 80007e8:	0800113c 	.word	0x0800113c
 80007ec:	08001140 	.word	0x08001140

080007f0 <__retarget_lock_acquire_recursive>:
 80007f0:	4770      	bx	lr

080007f2 <__retarget_lock_release_recursive>:
 80007f2:	4770      	bx	lr

080007f4 <_free_r>:
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	4605      	mov	r5, r0
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d041      	beq.n	8000880 <_free_r+0x8c>
 80007fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000800:	1f0c      	subs	r4, r1, #4
 8000802:	2b00      	cmp	r3, #0
 8000804:	bfb8      	it	lt
 8000806:	18e4      	addlt	r4, r4, r3
 8000808:	f000 f8e0 	bl	80009cc <__malloc_lock>
 800080c:	4a1d      	ldr	r2, [pc, #116]	@ (8000884 <_free_r+0x90>)
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	b933      	cbnz	r3, 8000820 <_free_r+0x2c>
 8000812:	6063      	str	r3, [r4, #4]
 8000814:	6014      	str	r4, [r2, #0]
 8000816:	4628      	mov	r0, r5
 8000818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800081c:	f000 b8dc 	b.w	80009d8 <__malloc_unlock>
 8000820:	42a3      	cmp	r3, r4
 8000822:	d908      	bls.n	8000836 <_free_r+0x42>
 8000824:	6820      	ldr	r0, [r4, #0]
 8000826:	1821      	adds	r1, r4, r0
 8000828:	428b      	cmp	r3, r1
 800082a:	bf01      	itttt	eq
 800082c:	6819      	ldreq	r1, [r3, #0]
 800082e:	685b      	ldreq	r3, [r3, #4]
 8000830:	1809      	addeq	r1, r1, r0
 8000832:	6021      	streq	r1, [r4, #0]
 8000834:	e7ed      	b.n	8000812 <_free_r+0x1e>
 8000836:	461a      	mov	r2, r3
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	b10b      	cbz	r3, 8000840 <_free_r+0x4c>
 800083c:	42a3      	cmp	r3, r4
 800083e:	d9fa      	bls.n	8000836 <_free_r+0x42>
 8000840:	6811      	ldr	r1, [r2, #0]
 8000842:	1850      	adds	r0, r2, r1
 8000844:	42a0      	cmp	r0, r4
 8000846:	d10b      	bne.n	8000860 <_free_r+0x6c>
 8000848:	6820      	ldr	r0, [r4, #0]
 800084a:	4401      	add	r1, r0
 800084c:	1850      	adds	r0, r2, r1
 800084e:	4283      	cmp	r3, r0
 8000850:	6011      	str	r1, [r2, #0]
 8000852:	d1e0      	bne.n	8000816 <_free_r+0x22>
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	6053      	str	r3, [r2, #4]
 800085a:	4408      	add	r0, r1
 800085c:	6010      	str	r0, [r2, #0]
 800085e:	e7da      	b.n	8000816 <_free_r+0x22>
 8000860:	d902      	bls.n	8000868 <_free_r+0x74>
 8000862:	230c      	movs	r3, #12
 8000864:	602b      	str	r3, [r5, #0]
 8000866:	e7d6      	b.n	8000816 <_free_r+0x22>
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	1821      	adds	r1, r4, r0
 800086c:	428b      	cmp	r3, r1
 800086e:	bf04      	itt	eq
 8000870:	6819      	ldreq	r1, [r3, #0]
 8000872:	685b      	ldreq	r3, [r3, #4]
 8000874:	6063      	str	r3, [r4, #4]
 8000876:	bf04      	itt	eq
 8000878:	1809      	addeq	r1, r1, r0
 800087a:	6021      	streq	r1, [r4, #0]
 800087c:	6054      	str	r4, [r2, #4]
 800087e:	e7ca      	b.n	8000816 <_free_r+0x22>
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	bf00      	nop
 8000884:	200001b4 	.word	0x200001b4

08000888 <sbrk_aligned>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4e0f      	ldr	r6, [pc, #60]	@ (80008c8 <sbrk_aligned+0x40>)
 800088c:	460c      	mov	r4, r1
 800088e:	6831      	ldr	r1, [r6, #0]
 8000890:	4605      	mov	r5, r0
 8000892:	b911      	cbnz	r1, 800089a <sbrk_aligned+0x12>
 8000894:	f000 fba6 	bl	8000fe4 <_sbrk_r>
 8000898:	6030      	str	r0, [r6, #0]
 800089a:	4621      	mov	r1, r4
 800089c:	4628      	mov	r0, r5
 800089e:	f000 fba1 	bl	8000fe4 <_sbrk_r>
 80008a2:	1c43      	adds	r3, r0, #1
 80008a4:	d103      	bne.n	80008ae <sbrk_aligned+0x26>
 80008a6:	f04f 34ff 	mov.w	r4, #4294967295
 80008aa:	4620      	mov	r0, r4
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	1cc4      	adds	r4, r0, #3
 80008b0:	f024 0403 	bic.w	r4, r4, #3
 80008b4:	42a0      	cmp	r0, r4
 80008b6:	d0f8      	beq.n	80008aa <sbrk_aligned+0x22>
 80008b8:	1a21      	subs	r1, r4, r0
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 fb92 	bl	8000fe4 <_sbrk_r>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d1f2      	bne.n	80008aa <sbrk_aligned+0x22>
 80008c4:	e7ef      	b.n	80008a6 <sbrk_aligned+0x1e>
 80008c6:	bf00      	nop
 80008c8:	200001b0 	.word	0x200001b0

080008cc <_malloc_r>:
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d0:	1ccd      	adds	r5, r1, #3
 80008d2:	f025 0503 	bic.w	r5, r5, #3
 80008d6:	3508      	adds	r5, #8
 80008d8:	2d0c      	cmp	r5, #12
 80008da:	bf38      	it	cc
 80008dc:	250c      	movcc	r5, #12
 80008de:	2d00      	cmp	r5, #0
 80008e0:	4606      	mov	r6, r0
 80008e2:	db01      	blt.n	80008e8 <_malloc_r+0x1c>
 80008e4:	42a9      	cmp	r1, r5
 80008e6:	d904      	bls.n	80008f2 <_malloc_r+0x26>
 80008e8:	230c      	movs	r3, #12
 80008ea:	6033      	str	r3, [r6, #0]
 80008ec:	2000      	movs	r0, #0
 80008ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009c8 <_malloc_r+0xfc>
 80008f6:	f000 f869 	bl	80009cc <__malloc_lock>
 80008fa:	f8d8 3000 	ldr.w	r3, [r8]
 80008fe:	461c      	mov	r4, r3
 8000900:	bb44      	cbnz	r4, 8000954 <_malloc_r+0x88>
 8000902:	4629      	mov	r1, r5
 8000904:	4630      	mov	r0, r6
 8000906:	f7ff ffbf 	bl	8000888 <sbrk_aligned>
 800090a:	1c43      	adds	r3, r0, #1
 800090c:	4604      	mov	r4, r0
 800090e:	d158      	bne.n	80009c2 <_malloc_r+0xf6>
 8000910:	f8d8 4000 	ldr.w	r4, [r8]
 8000914:	4627      	mov	r7, r4
 8000916:	2f00      	cmp	r7, #0
 8000918:	d143      	bne.n	80009a2 <_malloc_r+0xd6>
 800091a:	2c00      	cmp	r4, #0
 800091c:	d04b      	beq.n	80009b6 <_malloc_r+0xea>
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	4639      	mov	r1, r7
 8000922:	4630      	mov	r0, r6
 8000924:	eb04 0903 	add.w	r9, r4, r3
 8000928:	f000 fb5c 	bl	8000fe4 <_sbrk_r>
 800092c:	4581      	cmp	r9, r0
 800092e:	d142      	bne.n	80009b6 <_malloc_r+0xea>
 8000930:	6821      	ldr	r1, [r4, #0]
 8000932:	1a6d      	subs	r5, r5, r1
 8000934:	4629      	mov	r1, r5
 8000936:	4630      	mov	r0, r6
 8000938:	f7ff ffa6 	bl	8000888 <sbrk_aligned>
 800093c:	3001      	adds	r0, #1
 800093e:	d03a      	beq.n	80009b6 <_malloc_r+0xea>
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	442b      	add	r3, r5
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	f8d8 3000 	ldr.w	r3, [r8]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	bb62      	cbnz	r2, 80009a8 <_malloc_r+0xdc>
 800094e:	f8c8 7000 	str.w	r7, [r8]
 8000952:	e00f      	b.n	8000974 <_malloc_r+0xa8>
 8000954:	6822      	ldr	r2, [r4, #0]
 8000956:	1b52      	subs	r2, r2, r5
 8000958:	d420      	bmi.n	800099c <_malloc_r+0xd0>
 800095a:	2a0b      	cmp	r2, #11
 800095c:	d917      	bls.n	800098e <_malloc_r+0xc2>
 800095e:	1961      	adds	r1, r4, r5
 8000960:	42a3      	cmp	r3, r4
 8000962:	6025      	str	r5, [r4, #0]
 8000964:	bf18      	it	ne
 8000966:	6059      	strne	r1, [r3, #4]
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	bf08      	it	eq
 800096c:	f8c8 1000 	streq.w	r1, [r8]
 8000970:	5162      	str	r2, [r4, r5]
 8000972:	604b      	str	r3, [r1, #4]
 8000974:	4630      	mov	r0, r6
 8000976:	f000 f82f 	bl	80009d8 <__malloc_unlock>
 800097a:	f104 000b 	add.w	r0, r4, #11
 800097e:	1d23      	adds	r3, r4, #4
 8000980:	f020 0007 	bic.w	r0, r0, #7
 8000984:	1ac2      	subs	r2, r0, r3
 8000986:	bf1c      	itt	ne
 8000988:	1a1b      	subne	r3, r3, r0
 800098a:	50a3      	strne	r3, [r4, r2]
 800098c:	e7af      	b.n	80008ee <_malloc_r+0x22>
 800098e:	6862      	ldr	r2, [r4, #4]
 8000990:	42a3      	cmp	r3, r4
 8000992:	bf0c      	ite	eq
 8000994:	f8c8 2000 	streq.w	r2, [r8]
 8000998:	605a      	strne	r2, [r3, #4]
 800099a:	e7eb      	b.n	8000974 <_malloc_r+0xa8>
 800099c:	4623      	mov	r3, r4
 800099e:	6864      	ldr	r4, [r4, #4]
 80009a0:	e7ae      	b.n	8000900 <_malloc_r+0x34>
 80009a2:	463c      	mov	r4, r7
 80009a4:	687f      	ldr	r7, [r7, #4]
 80009a6:	e7b6      	b.n	8000916 <_malloc_r+0x4a>
 80009a8:	461a      	mov	r2, r3
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	d1fb      	bne.n	80009a8 <_malloc_r+0xdc>
 80009b0:	2300      	movs	r3, #0
 80009b2:	6053      	str	r3, [r2, #4]
 80009b4:	e7de      	b.n	8000974 <_malloc_r+0xa8>
 80009b6:	230c      	movs	r3, #12
 80009b8:	6033      	str	r3, [r6, #0]
 80009ba:	4630      	mov	r0, r6
 80009bc:	f000 f80c 	bl	80009d8 <__malloc_unlock>
 80009c0:	e794      	b.n	80008ec <_malloc_r+0x20>
 80009c2:	6005      	str	r5, [r0, #0]
 80009c4:	e7d6      	b.n	8000974 <_malloc_r+0xa8>
 80009c6:	bf00      	nop
 80009c8:	200001b4 	.word	0x200001b4

080009cc <__malloc_lock>:
 80009cc:	4801      	ldr	r0, [pc, #4]	@ (80009d4 <__malloc_lock+0x8>)
 80009ce:	f7ff bf0f 	b.w	80007f0 <__retarget_lock_acquire_recursive>
 80009d2:	bf00      	nop
 80009d4:	200001ac 	.word	0x200001ac

080009d8 <__malloc_unlock>:
 80009d8:	4801      	ldr	r0, [pc, #4]	@ (80009e0 <__malloc_unlock+0x8>)
 80009da:	f7ff bf0a 	b.w	80007f2 <__retarget_lock_release_recursive>
 80009de:	bf00      	nop
 80009e0:	200001ac 	.word	0x200001ac

080009e4 <__ssputs_r>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	688e      	ldr	r6, [r1, #8]
 80009ea:	461f      	mov	r7, r3
 80009ec:	42be      	cmp	r6, r7
 80009ee:	680b      	ldr	r3, [r1, #0]
 80009f0:	4682      	mov	sl, r0
 80009f2:	460c      	mov	r4, r1
 80009f4:	4690      	mov	r8, r2
 80009f6:	d82d      	bhi.n	8000a54 <__ssputs_r+0x70>
 80009f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a00:	d026      	beq.n	8000a50 <__ssputs_r+0x6c>
 8000a02:	6965      	ldr	r5, [r4, #20]
 8000a04:	6909      	ldr	r1, [r1, #16]
 8000a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a0a:	eba3 0901 	sub.w	r9, r3, r1
 8000a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a12:	1c7b      	adds	r3, r7, #1
 8000a14:	444b      	add	r3, r9
 8000a16:	106d      	asrs	r5, r5, #1
 8000a18:	429d      	cmp	r5, r3
 8000a1a:	bf38      	it	cc
 8000a1c:	461d      	movcc	r5, r3
 8000a1e:	0553      	lsls	r3, r2, #21
 8000a20:	d527      	bpl.n	8000a72 <__ssputs_r+0x8e>
 8000a22:	4629      	mov	r1, r5
 8000a24:	f7ff ff52 	bl	80008cc <_malloc_r>
 8000a28:	4606      	mov	r6, r0
 8000a2a:	b360      	cbz	r0, 8000a86 <__ssputs_r+0xa2>
 8000a2c:	6921      	ldr	r1, [r4, #16]
 8000a2e:	464a      	mov	r2, r9
 8000a30:	f000 fae8 	bl	8001004 <memcpy>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3e:	81a3      	strh	r3, [r4, #12]
 8000a40:	6126      	str	r6, [r4, #16]
 8000a42:	6165      	str	r5, [r4, #20]
 8000a44:	444e      	add	r6, r9
 8000a46:	eba5 0509 	sub.w	r5, r5, r9
 8000a4a:	6026      	str	r6, [r4, #0]
 8000a4c:	60a5      	str	r5, [r4, #8]
 8000a4e:	463e      	mov	r6, r7
 8000a50:	42be      	cmp	r6, r7
 8000a52:	d900      	bls.n	8000a56 <__ssputs_r+0x72>
 8000a54:	463e      	mov	r6, r7
 8000a56:	6820      	ldr	r0, [r4, #0]
 8000a58:	4632      	mov	r2, r6
 8000a5a:	4641      	mov	r1, r8
 8000a5c:	f000 faa8 	bl	8000fb0 <memmove>
 8000a60:	68a3      	ldr	r3, [r4, #8]
 8000a62:	1b9b      	subs	r3, r3, r6
 8000a64:	60a3      	str	r3, [r4, #8]
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	4433      	add	r3, r6
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	462a      	mov	r2, r5
 8000a74:	f000 fad4 	bl	8001020 <_realloc_r>
 8000a78:	4606      	mov	r6, r0
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d1e0      	bne.n	8000a40 <__ssputs_r+0x5c>
 8000a7e:	6921      	ldr	r1, [r4, #16]
 8000a80:	4650      	mov	r0, sl
 8000a82:	f7ff feb7 	bl	80007f4 <_free_r>
 8000a86:	230c      	movs	r3, #12
 8000a88:	f8ca 3000 	str.w	r3, [sl]
 8000a8c:	89a3      	ldrh	r3, [r4, #12]
 8000a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a92:	81a3      	strh	r3, [r4, #12]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	e7e9      	b.n	8000a6e <__ssputs_r+0x8a>
	...

08000a9c <_svfiprintf_r>:
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	898b      	ldrh	r3, [r1, #12]
 8000aa4:	061b      	lsls	r3, r3, #24
 8000aa6:	b09d      	sub	sp, #116	@ 0x74
 8000aa8:	4607      	mov	r7, r0
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4614      	mov	r4, r2
 8000aae:	d510      	bpl.n	8000ad2 <_svfiprintf_r+0x36>
 8000ab0:	690b      	ldr	r3, [r1, #16]
 8000ab2:	b973      	cbnz	r3, 8000ad2 <_svfiprintf_r+0x36>
 8000ab4:	2140      	movs	r1, #64	@ 0x40
 8000ab6:	f7ff ff09 	bl	80008cc <_malloc_r>
 8000aba:	6028      	str	r0, [r5, #0]
 8000abc:	6128      	str	r0, [r5, #16]
 8000abe:	b930      	cbnz	r0, 8000ace <_svfiprintf_r+0x32>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	b01d      	add	sp, #116	@ 0x74
 8000aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	616b      	str	r3, [r5, #20]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ae0:	2330      	movs	r3, #48	@ 0x30
 8000ae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c80 <_svfiprintf_r+0x1e4>
 8000ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000aea:	f04f 0901 	mov.w	r9, #1
 8000aee:	4623      	mov	r3, r4
 8000af0:	469a      	mov	sl, r3
 8000af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000af6:	b10a      	cbz	r2, 8000afc <_svfiprintf_r+0x60>
 8000af8:	2a25      	cmp	r2, #37	@ 0x25
 8000afa:	d1f9      	bne.n	8000af0 <_svfiprintf_r+0x54>
 8000afc:	ebba 0b04 	subs.w	fp, sl, r4
 8000b00:	d00b      	beq.n	8000b1a <_svfiprintf_r+0x7e>
 8000b02:	465b      	mov	r3, fp
 8000b04:	4622      	mov	r2, r4
 8000b06:	4629      	mov	r1, r5
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f7ff ff6b 	bl	80009e4 <__ssputs_r>
 8000b0e:	3001      	adds	r0, #1
 8000b10:	f000 80a7 	beq.w	8000c62 <_svfiprintf_r+0x1c6>
 8000b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b16:	445a      	add	r2, fp
 8000b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 809f 	beq.w	8000c62 <_svfiprintf_r+0x1c6>
 8000b24:	2300      	movs	r3, #0
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b2e:	f10a 0a01 	add.w	sl, sl, #1
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	9307      	str	r3, [sp, #28]
 8000b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b3c:	4654      	mov	r4, sl
 8000b3e:	2205      	movs	r2, #5
 8000b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b44:	484e      	ldr	r0, [pc, #312]	@ (8000c80 <_svfiprintf_r+0x1e4>)
 8000b46:	f7ff fb63 	bl	8000210 <memchr>
 8000b4a:	9a04      	ldr	r2, [sp, #16]
 8000b4c:	b9d8      	cbnz	r0, 8000b86 <_svfiprintf_r+0xea>
 8000b4e:	06d0      	lsls	r0, r2, #27
 8000b50:	bf44      	itt	mi
 8000b52:	2320      	movmi	r3, #32
 8000b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b58:	0711      	lsls	r1, r2, #28
 8000b5a:	bf44      	itt	mi
 8000b5c:	232b      	movmi	r3, #43	@ 0x2b
 8000b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b62:	f89a 3000 	ldrb.w	r3, [sl]
 8000b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b68:	d015      	beq.n	8000b96 <_svfiprintf_r+0xfa>
 8000b6a:	9a07      	ldr	r2, [sp, #28]
 8000b6c:	4654      	mov	r4, sl
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f04f 0c0a 	mov.w	ip, #10
 8000b74:	4621      	mov	r1, r4
 8000b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b7a:	3b30      	subs	r3, #48	@ 0x30
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	d94b      	bls.n	8000c18 <_svfiprintf_r+0x17c>
 8000b80:	b1b0      	cbz	r0, 8000bb0 <_svfiprintf_r+0x114>
 8000b82:	9207      	str	r2, [sp, #28]
 8000b84:	e014      	b.n	8000bb0 <_svfiprintf_r+0x114>
 8000b86:	eba0 0308 	sub.w	r3, r0, r8
 8000b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	9304      	str	r3, [sp, #16]
 8000b92:	46a2      	mov	sl, r4
 8000b94:	e7d2      	b.n	8000b3c <_svfiprintf_r+0xa0>
 8000b96:	9b03      	ldr	r3, [sp, #12]
 8000b98:	1d19      	adds	r1, r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	9103      	str	r1, [sp, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bfbb      	ittet	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8000ba8:	9307      	strge	r3, [sp, #28]
 8000baa:	9307      	strlt	r3, [sp, #28]
 8000bac:	bfb8      	it	lt
 8000bae:	9204      	strlt	r2, [sp, #16]
 8000bb0:	7823      	ldrb	r3, [r4, #0]
 8000bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bb4:	d10a      	bne.n	8000bcc <_svfiprintf_r+0x130>
 8000bb6:	7863      	ldrb	r3, [r4, #1]
 8000bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bba:	d132      	bne.n	8000c22 <_svfiprintf_r+0x186>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	1d1a      	adds	r2, r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9203      	str	r2, [sp, #12]
 8000bc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bc8:	3402      	adds	r4, #2
 8000bca:	9305      	str	r3, [sp, #20]
 8000bcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c90 <_svfiprintf_r+0x1f4>
 8000bd0:	7821      	ldrb	r1, [r4, #0]
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4650      	mov	r0, sl
 8000bd6:	f7ff fb1b 	bl	8000210 <memchr>
 8000bda:	b138      	cbz	r0, 8000bec <_svfiprintf_r+0x150>
 8000bdc:	9b04      	ldr	r3, [sp, #16]
 8000bde:	eba0 000a 	sub.w	r0, r0, sl
 8000be2:	2240      	movs	r2, #64	@ 0x40
 8000be4:	4082      	lsls	r2, r0
 8000be6:	4313      	orrs	r3, r2
 8000be8:	3401      	adds	r4, #1
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf0:	4824      	ldr	r0, [pc, #144]	@ (8000c84 <_svfiprintf_r+0x1e8>)
 8000bf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	f7ff fb0a 	bl	8000210 <memchr>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d036      	beq.n	8000c6e <_svfiprintf_r+0x1d2>
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <_svfiprintf_r+0x1ec>)
 8000c02:	bb1b      	cbnz	r3, 8000c4c <_svfiprintf_r+0x1b0>
 8000c04:	9b03      	ldr	r3, [sp, #12]
 8000c06:	3307      	adds	r3, #7
 8000c08:	f023 0307 	bic.w	r3, r3, #7
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	9303      	str	r3, [sp, #12]
 8000c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c12:	4433      	add	r3, r6
 8000c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c16:	e76a      	b.n	8000aee <_svfiprintf_r+0x52>
 8000c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	2001      	movs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <_svfiprintf_r+0xd8>
 8000c22:	2300      	movs	r3, #0
 8000c24:	3401      	adds	r4, #1
 8000c26:	9305      	str	r3, [sp, #20]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 0c0a 	mov.w	ip, #10
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c34:	3a30      	subs	r2, #48	@ 0x30
 8000c36:	2a09      	cmp	r2, #9
 8000c38:	d903      	bls.n	8000c42 <_svfiprintf_r+0x1a6>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0c6      	beq.n	8000bcc <_svfiprintf_r+0x130>
 8000c3e:	9105      	str	r1, [sp, #20]
 8000c40:	e7c4      	b.n	8000bcc <_svfiprintf_r+0x130>
 8000c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c46:	4604      	mov	r4, r0
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e7f0      	b.n	8000c2e <_svfiprintf_r+0x192>
 8000c4c:	ab03      	add	r3, sp, #12
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	462a      	mov	r2, r5
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <_svfiprintf_r+0x1f0>)
 8000c54:	a904      	add	r1, sp, #16
 8000c56:	4638      	mov	r0, r7
 8000c58:	f3af 8000 	nop.w
 8000c5c:	1c42      	adds	r2, r0, #1
 8000c5e:	4606      	mov	r6, r0
 8000c60:	d1d6      	bne.n	8000c10 <_svfiprintf_r+0x174>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	065b      	lsls	r3, r3, #25
 8000c66:	f53f af2d 	bmi.w	8000ac4 <_svfiprintf_r+0x28>
 8000c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c6c:	e72c      	b.n	8000ac8 <_svfiprintf_r+0x2c>
 8000c6e:	ab03      	add	r3, sp, #12
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	462a      	mov	r2, r5
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <_svfiprintf_r+0x1f0>)
 8000c76:	a904      	add	r1, sp, #16
 8000c78:	4638      	mov	r0, r7
 8000c7a:	f000 f879 	bl	8000d70 <_printf_i>
 8000c7e:	e7ed      	b.n	8000c5c <_svfiprintf_r+0x1c0>
 8000c80:	080010fe 	.word	0x080010fe
 8000c84:	08001108 	.word	0x08001108
 8000c88:	00000000 	.word	0x00000000
 8000c8c:	080009e5 	.word	0x080009e5
 8000c90:	08001104 	.word	0x08001104

08000c94 <_printf_common>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	4616      	mov	r6, r2
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	688a      	ldr	r2, [r1, #8]
 8000c9e:	690b      	ldr	r3, [r1, #16]
 8000ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	bfb8      	it	lt
 8000ca8:	4613      	movlt	r3, r2
 8000caa:	6033      	str	r3, [r6, #0]
 8000cac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	b10a      	cbz	r2, 8000cba <_printf_common+0x26>
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	6033      	str	r3, [r6, #0]
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	0699      	lsls	r1, r3, #26
 8000cbe:	bf42      	ittt	mi
 8000cc0:	6833      	ldrmi	r3, [r6, #0]
 8000cc2:	3302      	addmi	r3, #2
 8000cc4:	6033      	strmi	r3, [r6, #0]
 8000cc6:	6825      	ldr	r5, [r4, #0]
 8000cc8:	f015 0506 	ands.w	r5, r5, #6
 8000ccc:	d106      	bne.n	8000cdc <_printf_common+0x48>
 8000cce:	f104 0a19 	add.w	sl, r4, #25
 8000cd2:	68e3      	ldr	r3, [r4, #12]
 8000cd4:	6832      	ldr	r2, [r6, #0]
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	dc26      	bgt.n	8000d2a <_printf_common+0x96>
 8000cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	3b00      	subs	r3, #0
 8000ce4:	bf18      	it	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	0692      	lsls	r2, r2, #26
 8000cea:	d42b      	bmi.n	8000d44 <_printf_common+0xb0>
 8000cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	47c8      	blx	r9
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	d01e      	beq.n	8000d38 <_printf_common+0xa4>
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	6922      	ldr	r2, [r4, #16]
 8000cfe:	f003 0306 	and.w	r3, r3, #6
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf02      	ittt	eq
 8000d06:	68e5      	ldreq	r5, [r4, #12]
 8000d08:	6833      	ldreq	r3, [r6, #0]
 8000d0a:	1aed      	subeq	r5, r5, r3
 8000d0c:	68a3      	ldr	r3, [r4, #8]
 8000d0e:	bf0c      	ite	eq
 8000d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d14:	2500      	movne	r5, #0
 8000d16:	4293      	cmp	r3, r2
 8000d18:	bfc4      	itt	gt
 8000d1a:	1a9b      	subgt	r3, r3, r2
 8000d1c:	18ed      	addgt	r5, r5, r3
 8000d1e:	2600      	movs	r6, #0
 8000d20:	341a      	adds	r4, #26
 8000d22:	42b5      	cmp	r5, r6
 8000d24:	d11a      	bne.n	8000d5c <_printf_common+0xc8>
 8000d26:	2000      	movs	r0, #0
 8000d28:	e008      	b.n	8000d3c <_printf_common+0xa8>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4652      	mov	r2, sl
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4638      	mov	r0, r7
 8000d32:	47c8      	blx	r9
 8000d34:	3001      	adds	r0, #1
 8000d36:	d103      	bne.n	8000d40 <_printf_common+0xac>
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	3501      	adds	r5, #1
 8000d42:	e7c6      	b.n	8000cd2 <_printf_common+0x3e>
 8000d44:	18e1      	adds	r1, r4, r3
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	2030      	movs	r0, #48	@ 0x30
 8000d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d4e:	4422      	add	r2, r4
 8000d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d58:	3302      	adds	r3, #2
 8000d5a:	e7c7      	b.n	8000cec <_printf_common+0x58>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	4622      	mov	r2, r4
 8000d60:	4641      	mov	r1, r8
 8000d62:	4638      	mov	r0, r7
 8000d64:	47c8      	blx	r9
 8000d66:	3001      	adds	r0, #1
 8000d68:	d0e6      	beq.n	8000d38 <_printf_common+0xa4>
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7d9      	b.n	8000d22 <_printf_common+0x8e>
	...

08000d70 <_printf_i>:
 8000d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	7e0f      	ldrb	r7, [r1, #24]
 8000d76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d78:	2f78      	cmp	r7, #120	@ 0x78
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4680      	mov	r8, r0
 8000d7e:	460c      	mov	r4, r1
 8000d80:	469a      	mov	sl, r3
 8000d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d86:	d807      	bhi.n	8000d98 <_printf_i+0x28>
 8000d88:	2f62      	cmp	r7, #98	@ 0x62
 8000d8a:	d80a      	bhi.n	8000da2 <_printf_i+0x32>
 8000d8c:	2f00      	cmp	r7, #0
 8000d8e:	f000 80d2 	beq.w	8000f36 <_printf_i+0x1c6>
 8000d92:	2f58      	cmp	r7, #88	@ 0x58
 8000d94:	f000 80b9 	beq.w	8000f0a <_printf_i+0x19a>
 8000d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000da0:	e03a      	b.n	8000e18 <_printf_i+0xa8>
 8000da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000da6:	2b15      	cmp	r3, #21
 8000da8:	d8f6      	bhi.n	8000d98 <_printf_i+0x28>
 8000daa:	a101      	add	r1, pc, #4	@ (adr r1, 8000db0 <_printf_i+0x40>)
 8000dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000db0:	08000e09 	.word	0x08000e09
 8000db4:	08000e1d 	.word	0x08000e1d
 8000db8:	08000d99 	.word	0x08000d99
 8000dbc:	08000d99 	.word	0x08000d99
 8000dc0:	08000d99 	.word	0x08000d99
 8000dc4:	08000d99 	.word	0x08000d99
 8000dc8:	08000e1d 	.word	0x08000e1d
 8000dcc:	08000d99 	.word	0x08000d99
 8000dd0:	08000d99 	.word	0x08000d99
 8000dd4:	08000d99 	.word	0x08000d99
 8000dd8:	08000d99 	.word	0x08000d99
 8000ddc:	08000f1d 	.word	0x08000f1d
 8000de0:	08000e47 	.word	0x08000e47
 8000de4:	08000ed7 	.word	0x08000ed7
 8000de8:	08000d99 	.word	0x08000d99
 8000dec:	08000d99 	.word	0x08000d99
 8000df0:	08000f3f 	.word	0x08000f3f
 8000df4:	08000d99 	.word	0x08000d99
 8000df8:	08000e47 	.word	0x08000e47
 8000dfc:	08000d99 	.word	0x08000d99
 8000e00:	08000d99 	.word	0x08000d99
 8000e04:	08000edf 	.word	0x08000edf
 8000e08:	6833      	ldr	r3, [r6, #0]
 8000e0a:	1d1a      	adds	r2, r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6032      	str	r2, [r6, #0]
 8000e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e09d      	b.n	8000f58 <_printf_i+0x1e8>
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	1d19      	adds	r1, r3, #4
 8000e22:	6031      	str	r1, [r6, #0]
 8000e24:	0606      	lsls	r6, r0, #24
 8000e26:	d501      	bpl.n	8000e2c <_printf_i+0xbc>
 8000e28:	681d      	ldr	r5, [r3, #0]
 8000e2a:	e003      	b.n	8000e34 <_printf_i+0xc4>
 8000e2c:	0645      	lsls	r5, r0, #25
 8000e2e:	d5fb      	bpl.n	8000e28 <_printf_i+0xb8>
 8000e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	da03      	bge.n	8000e40 <_printf_i+0xd0>
 8000e38:	232d      	movs	r3, #45	@ 0x2d
 8000e3a:	426d      	negs	r5, r5
 8000e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e40:	4859      	ldr	r0, [pc, #356]	@ (8000fa8 <_printf_i+0x238>)
 8000e42:	230a      	movs	r3, #10
 8000e44:	e011      	b.n	8000e6a <_printf_i+0xfa>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	0608      	lsls	r0, r1, #24
 8000e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e50:	d402      	bmi.n	8000e58 <_printf_i+0xe8>
 8000e52:	0649      	lsls	r1, r1, #25
 8000e54:	bf48      	it	mi
 8000e56:	b2ad      	uxthmi	r5, r5
 8000e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e5a:	4853      	ldr	r0, [pc, #332]	@ (8000fa8 <_printf_i+0x238>)
 8000e5c:	6033      	str	r3, [r6, #0]
 8000e5e:	bf14      	ite	ne
 8000e60:	230a      	movne	r3, #10
 8000e62:	2308      	moveq	r3, #8
 8000e64:	2100      	movs	r1, #0
 8000e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e6a:	6866      	ldr	r6, [r4, #4]
 8000e6c:	60a6      	str	r6, [r4, #8]
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	bfa2      	ittt	ge
 8000e72:	6821      	ldrge	r1, [r4, #0]
 8000e74:	f021 0104 	bicge.w	r1, r1, #4
 8000e78:	6021      	strge	r1, [r4, #0]
 8000e7a:	b90d      	cbnz	r5, 8000e80 <_printf_i+0x110>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d04b      	beq.n	8000f18 <_printf_i+0x1a8>
 8000e80:	4616      	mov	r6, r2
 8000e82:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e86:	fb03 5711 	mls	r7, r3, r1, r5
 8000e8a:	5dc7      	ldrb	r7, [r0, r7]
 8000e8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e90:	462f      	mov	r7, r5
 8000e92:	42bb      	cmp	r3, r7
 8000e94:	460d      	mov	r5, r1
 8000e96:	d9f4      	bls.n	8000e82 <_printf_i+0x112>
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d10b      	bne.n	8000eb4 <_printf_i+0x144>
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	07df      	lsls	r7, r3, #31
 8000ea0:	d508      	bpl.n	8000eb4 <_printf_i+0x144>
 8000ea2:	6923      	ldr	r3, [r4, #16]
 8000ea4:	6861      	ldr	r1, [r4, #4]
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	bfde      	ittt	le
 8000eaa:	2330      	movle	r3, #48	@ 0x30
 8000eac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000eb4:	1b92      	subs	r2, r2, r6
 8000eb6:	6122      	str	r2, [r4, #16]
 8000eb8:	f8cd a000 	str.w	sl, [sp]
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	aa03      	add	r2, sp, #12
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	f7ff fee6 	bl	8000c94 <_printf_common>
 8000ec8:	3001      	adds	r0, #1
 8000eca:	d14a      	bne.n	8000f62 <_printf_i+0x1f2>
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	b004      	add	sp, #16
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	4833      	ldr	r0, [pc, #204]	@ (8000fac <_printf_i+0x23c>)
 8000ee0:	2778      	movs	r7, #120	@ 0x78
 8000ee2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	6831      	ldr	r1, [r6, #0]
 8000eea:	061f      	lsls	r7, r3, #24
 8000eec:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ef0:	d402      	bmi.n	8000ef8 <_printf_i+0x188>
 8000ef2:	065f      	lsls	r7, r3, #25
 8000ef4:	bf48      	it	mi
 8000ef6:	b2ad      	uxthmi	r5, r5
 8000ef8:	6031      	str	r1, [r6, #0]
 8000efa:	07d9      	lsls	r1, r3, #31
 8000efc:	bf44      	itt	mi
 8000efe:	f043 0320 	orrmi.w	r3, r3, #32
 8000f02:	6023      	strmi	r3, [r4, #0]
 8000f04:	b11d      	cbz	r5, 8000f0e <_printf_i+0x19e>
 8000f06:	2310      	movs	r3, #16
 8000f08:	e7ac      	b.n	8000e64 <_printf_i+0xf4>
 8000f0a:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <_printf_i+0x238>)
 8000f0c:	e7e9      	b.n	8000ee2 <_printf_i+0x172>
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	f023 0320 	bic.w	r3, r3, #32
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	e7f6      	b.n	8000f06 <_printf_i+0x196>
 8000f18:	4616      	mov	r6, r2
 8000f1a:	e7bd      	b.n	8000e98 <_printf_i+0x128>
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	6825      	ldr	r5, [r4, #0]
 8000f20:	6961      	ldr	r1, [r4, #20]
 8000f22:	1d18      	adds	r0, r3, #4
 8000f24:	6030      	str	r0, [r6, #0]
 8000f26:	062e      	lsls	r6, r5, #24
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	d501      	bpl.n	8000f30 <_printf_i+0x1c0>
 8000f2c:	6019      	str	r1, [r3, #0]
 8000f2e:	e002      	b.n	8000f36 <_printf_i+0x1c6>
 8000f30:	0668      	lsls	r0, r5, #25
 8000f32:	d5fb      	bpl.n	8000f2c <_printf_i+0x1bc>
 8000f34:	8019      	strh	r1, [r3, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	6123      	str	r3, [r4, #16]
 8000f3a:	4616      	mov	r6, r2
 8000f3c:	e7bc      	b.n	8000eb8 <_printf_i+0x148>
 8000f3e:	6833      	ldr	r3, [r6, #0]
 8000f40:	1d1a      	adds	r2, r3, #4
 8000f42:	6032      	str	r2, [r6, #0]
 8000f44:	681e      	ldr	r6, [r3, #0]
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	f7ff f960 	bl	8000210 <memchr>
 8000f50:	b108      	cbz	r0, 8000f56 <_printf_i+0x1e6>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	6060      	str	r0, [r4, #4]
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	6123      	str	r3, [r4, #16]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f60:	e7aa      	b.n	8000eb8 <_printf_i+0x148>
 8000f62:	6923      	ldr	r3, [r4, #16]
 8000f64:	4632      	mov	r2, r6
 8000f66:	4649      	mov	r1, r9
 8000f68:	4640      	mov	r0, r8
 8000f6a:	47d0      	blx	sl
 8000f6c:	3001      	adds	r0, #1
 8000f6e:	d0ad      	beq.n	8000ecc <_printf_i+0x15c>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	079b      	lsls	r3, r3, #30
 8000f74:	d413      	bmi.n	8000f9e <_printf_i+0x22e>
 8000f76:	68e0      	ldr	r0, [r4, #12]
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	4298      	cmp	r0, r3
 8000f7c:	bfb8      	it	lt
 8000f7e:	4618      	movlt	r0, r3
 8000f80:	e7a6      	b.n	8000ed0 <_printf_i+0x160>
 8000f82:	2301      	movs	r3, #1
 8000f84:	4632      	mov	r2, r6
 8000f86:	4649      	mov	r1, r9
 8000f88:	4640      	mov	r0, r8
 8000f8a:	47d0      	blx	sl
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	d09d      	beq.n	8000ecc <_printf_i+0x15c>
 8000f90:	3501      	adds	r5, #1
 8000f92:	68e3      	ldr	r3, [r4, #12]
 8000f94:	9903      	ldr	r1, [sp, #12]
 8000f96:	1a5b      	subs	r3, r3, r1
 8000f98:	42ab      	cmp	r3, r5
 8000f9a:	dcf2      	bgt.n	8000f82 <_printf_i+0x212>
 8000f9c:	e7eb      	b.n	8000f76 <_printf_i+0x206>
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	f104 0619 	add.w	r6, r4, #25
 8000fa4:	e7f5      	b.n	8000f92 <_printf_i+0x222>
 8000fa6:	bf00      	nop
 8000fa8:	0800110f 	.word	0x0800110f
 8000fac:	08001120 	.word	0x08001120

08000fb0 <memmove>:
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	b510      	push	{r4, lr}
 8000fb4:	eb01 0402 	add.w	r4, r1, r2
 8000fb8:	d902      	bls.n	8000fc0 <memmove+0x10>
 8000fba:	4284      	cmp	r4, r0
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	d807      	bhi.n	8000fd0 <memmove+0x20>
 8000fc0:	1e43      	subs	r3, r0, #1
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	d008      	beq.n	8000fd8 <memmove+0x28>
 8000fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fce:	e7f8      	b.n	8000fc2 <memmove+0x12>
 8000fd0:	4402      	add	r2, r0
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	428a      	cmp	r2, r1
 8000fd6:	d100      	bne.n	8000fda <memmove+0x2a>
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fe2:	e7f7      	b.n	8000fd4 <memmove+0x24>

08000fe4 <_sbrk_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4d06      	ldr	r5, [pc, #24]	@ (8001000 <_sbrk_r+0x1c>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	f7ff fb54 	bl	800069c <_sbrk>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_sbrk_r+0x1a>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_sbrk_r+0x1a>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	200001a8 	.word	0x200001a8

08001004 <memcpy>:
 8001004:	440a      	add	r2, r1
 8001006:	4291      	cmp	r1, r2
 8001008:	f100 33ff 	add.w	r3, r0, #4294967295
 800100c:	d100      	bne.n	8001010 <memcpy+0xc>
 800100e:	4770      	bx	lr
 8001010:	b510      	push	{r4, lr}
 8001012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800101a:	4291      	cmp	r1, r2
 800101c:	d1f9      	bne.n	8001012 <memcpy+0xe>
 800101e:	bd10      	pop	{r4, pc}

08001020 <_realloc_r>:
 8001020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001024:	4680      	mov	r8, r0
 8001026:	4615      	mov	r5, r2
 8001028:	460c      	mov	r4, r1
 800102a:	b921      	cbnz	r1, 8001036 <_realloc_r+0x16>
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	4611      	mov	r1, r2
 8001032:	f7ff bc4b 	b.w	80008cc <_malloc_r>
 8001036:	b92a      	cbnz	r2, 8001044 <_realloc_r+0x24>
 8001038:	f7ff fbdc 	bl	80007f4 <_free_r>
 800103c:	2400      	movs	r4, #0
 800103e:	4620      	mov	r0, r4
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001044:	f000 f81a 	bl	800107c <_malloc_usable_size_r>
 8001048:	4285      	cmp	r5, r0
 800104a:	4606      	mov	r6, r0
 800104c:	d802      	bhi.n	8001054 <_realloc_r+0x34>
 800104e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001052:	d8f4      	bhi.n	800103e <_realloc_r+0x1e>
 8001054:	4629      	mov	r1, r5
 8001056:	4640      	mov	r0, r8
 8001058:	f7ff fc38 	bl	80008cc <_malloc_r>
 800105c:	4607      	mov	r7, r0
 800105e:	2800      	cmp	r0, #0
 8001060:	d0ec      	beq.n	800103c <_realloc_r+0x1c>
 8001062:	42b5      	cmp	r5, r6
 8001064:	462a      	mov	r2, r5
 8001066:	4621      	mov	r1, r4
 8001068:	bf28      	it	cs
 800106a:	4632      	movcs	r2, r6
 800106c:	f7ff ffca 	bl	8001004 <memcpy>
 8001070:	4621      	mov	r1, r4
 8001072:	4640      	mov	r0, r8
 8001074:	f7ff fbbe 	bl	80007f4 <_free_r>
 8001078:	463c      	mov	r4, r7
 800107a:	e7e0      	b.n	800103e <_realloc_r+0x1e>

0800107c <_malloc_usable_size_r>:
 800107c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001080:	1f18      	subs	r0, r3, #4
 8001082:	2b00      	cmp	r3, #0
 8001084:	bfbc      	itt	lt
 8001086:	580b      	ldrlt	r3, [r1, r0]
 8001088:	18c0      	addlt	r0, r0, r3
 800108a:	4770      	bx	lr

0800108c <_init>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	bf00      	nop
 8001090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001092:	bc08      	pop	{r3}
 8001094:	469e      	mov	lr, r3
 8001096:	4770      	bx	lr

08001098 <_fini>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	bf00      	nop
 800109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109e:	bc08      	pop	{r3}
 80010a0:	469e      	mov	lr, r3
 80010a2:	4770      	bx	lr
