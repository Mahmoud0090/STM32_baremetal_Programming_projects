
PWM_using_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800054c  0800054c  0000154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000578  08000578  00001580  2**0
                  CONTENTS
  4 .ARM          00000000  08000578  08000578  00001580  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000578  08000580  00001580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800057c  0800057c  0000157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000580  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000580  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000604  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a3  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005d  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a50  00000000  00000000  00001e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000761  00000000  00000000  0001a88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b131  00000000  00000000  0001afee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a611f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000017c  00000000  00000000  000a6164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a62e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000534 	.word	0x08000534

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000534 	.word	0x08000534

08000204 <main>:
char uart2_read(void);
void pwm_init(void);
void set_pwm_duty(uint8_t duty);

// === main ===
int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    uart2_init();
 800020a:	f000 f82f 	bl	800026c <uart2_init>
    pwm_init();
 800020e:	f000 f8e5 	bl	80003dc <pwm_init>

    uint8_t brightness = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]

    uart2_print("Ready. Send 0-9 for brightness\n");
 8000216:	4812      	ldr	r0, [pc, #72]	@ (8000260 <main+0x5c>)
 8000218:	f000 f878 	bl	800030c <uart2_print>

    while (1) {
        char c = uart2_read();
 800021c:	f000 f8ca 	bl	80003b4 <uart2_read>
 8000220:	4603      	mov	r3, r0
 8000222:	71bb      	strb	r3, [r7, #6]

        if (c >= '0' && c <= '9') {
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	2b2f      	cmp	r3, #47	@ 0x2f
 8000228:	d9f8      	bls.n	800021c <main+0x18>
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	2b39      	cmp	r3, #57	@ 0x39
 800022e:	d8f5      	bhi.n	800021c <main+0x18>
            brightness = (c - '0') * 10;
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	3b30      	subs	r3, #48	@ 0x30
 8000234:	b2db      	uxtb	r3, r3
 8000236:	461a      	mov	r2, r3
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	4413      	add	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
            set_pwm_duty(brightness);
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f912 	bl	800046c <set_pwm_duty>

            uart2_print("Duty: ");
 8000248:	4806      	ldr	r0, [pc, #24]	@ (8000264 <main+0x60>)
 800024a:	f000 f85f 	bl	800030c <uart2_print>
            uart2_print_int(brightness);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f871 	bl	8000338 <uart2_print_int>
            uart2_print("\n\r");
 8000256:	4804      	ldr	r0, [pc, #16]	@ (8000268 <main+0x64>)
 8000258:	f000 f858 	bl	800030c <uart2_print>
    while (1) {
 800025c:	e7de      	b.n	800021c <main+0x18>
 800025e:	bf00      	nop
 8000260:	0800054c 	.word	0x0800054c
 8000264:	0800056c 	.word	0x0800056c
 8000268:	08000574 	.word	0x08000574

0800026c <uart2_init>:
        __NOP();
    }
}

// UART2 Initialization
void uart2_init(void) {
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN;
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <uart2_init+0x64>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	@ (80002d0 <uart2_init+0x64>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR  |= RCC_APB1ENR_USART2EN;
 800027c:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <uart2_init+0x64>)
 800027e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000280:	4a13      	ldr	r2, [pc, #76]	@ (80002d0 <uart2_init+0x64>)
 8000282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000286:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER  &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <uart2_init+0x68>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <uart2_init+0x68>)
 800028e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000292:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  (2 << (2 * 2)) | (2 << (3 * 2));  // AF mode
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <uart2_init+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <uart2_init+0x68>)
 800029a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800029e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |=  (7 << (2 * 4)) | (7 << (3 * 4));  // AF7 = USART2
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <uart2_init+0x68>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <uart2_init+0x68>)
 80002a6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80002aa:	6213      	str	r3, [r2, #32]

    USART2->BRR    = 0x0683;  // 9600 baud @ 16 MHz
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <uart2_init+0x6c>)
 80002ae:	f240 6283 	movw	r2, #1667	@ 0x683
 80002b2:	609a      	str	r2, [r3, #8]
    USART2->CR1   |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;  // Enable RX, TX, USART
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <uart2_init+0x6c>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <uart2_init+0x6c>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40004400 	.word	0x40004400

080002dc <uart2_write>:

// Send one byte over UART
void uart2_write(char c) {
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 80002e6:	bf00      	nop
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <uart2_write+0x2c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <uart2_write+0xc>
    USART2->DR = c;
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <uart2_write+0x2c>)
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	6053      	str	r3, [r2, #4]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40004400 	.word	0x40004400

0800030c <uart2_print>:

// Send string over UART
void uart2_print(char *s) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    while (*s) {
 8000314:	e006      	b.n	8000324 <uart2_print+0x18>
        uart2_write(*s++);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffdc 	bl	80002dc <uart2_write>
    while (*s) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f4      	bne.n	8000316 <uart2_print+0xa>
    }
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <uart2_print_int>:

// Convert integer to ASCII and print
void uart2_print_int(uint8_t val) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
    char buf[4];
    int i = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]

    if (val == 0) {
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d11d      	bne.n	8000388 <uart2_print_int+0x50>
        uart2_write('0');
 800034c:	2030      	movs	r0, #48	@ 0x30
 800034e:	f7ff ffc5 	bl	80002dc <uart2_write>
 8000352:	e02a      	b.n	80003aa <uart2_print_int+0x72>
        return;
    }

    while (val > 0) {
        buf[i++] = (val % 10) + '0';
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <uart2_print_int+0x78>)
 8000358:	fba3 1302 	umull	r1, r3, r3, r2
 800035c:	08d9      	lsrs	r1, r3, #3
 800035e:	460b      	mov	r3, r1
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	440b      	add	r3, r1
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	b2da      	uxtb	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	1c59      	adds	r1, r3, #1
 800036e:	60f9      	str	r1, [r7, #12]
 8000370:	3230      	adds	r2, #48	@ 0x30
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	3310      	adds	r3, #16
 8000376:	443b      	add	r3, r7
 8000378:	f803 2c08 	strb.w	r2, [r3, #-8]
        val /= 10;
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a0c      	ldr	r2, [pc, #48]	@ (80003b0 <uart2_print_int+0x78>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	08db      	lsrs	r3, r3, #3
 8000386:	71fb      	strb	r3, [r7, #7]
    while (val > 0) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1e2      	bne.n	8000354 <uart2_print_int+0x1c>
    }

    while (i--) {
 800038e:	e007      	b.n	80003a0 <uart2_print_int+0x68>
        uart2_write(buf[i]);
 8000390:	f107 0208 	add.w	r2, r7, #8
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff9e 	bl	80002dc <uart2_write>
    while (i--) {
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	60fa      	str	r2, [r7, #12]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f2      	bne.n	8000390 <uart2_print_int+0x58>
    }
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	cccccccd 	.word	0xcccccccd

080003b4 <uart2_read>:

// Receive one byte from UART
char uart2_read(void) {
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE));
 80003b8:	bf00      	nop
 80003ba:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <uart2_read+0x24>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f003 0320 	and.w	r3, r3, #32
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f9      	beq.n	80003ba <uart2_read+0x6>
    return USART2->DR;
 80003c6:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <uart2_read+0x24>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	b2db      	uxtb	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40004400 	.word	0x40004400

080003dc <pwm_init>:

// PWM Initialization on TIM3_CH1 (PB4)
void pwm_init(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    RCC->APB1ENR  |= RCC_APB1ENR_TIM3EN;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <pwm_init+0x84>)
 80003e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000460 <pwm_init+0x84>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOBEN;
 80003ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000460 <pwm_init+0x84>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000460 <pwm_init+0x84>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER  &= ~(3 << (4 * 2));
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <pwm_init+0x88>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a19      	ldr	r2, [pc, #100]	@ (8000464 <pwm_init+0x88>)
 80003fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000402:	6013      	str	r3, [r2, #0]
    GPIOB->MODER  |=  (2 << (4 * 2));   // AF mode
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <pwm_init+0x88>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a16      	ldr	r2, [pc, #88]	@ (8000464 <pwm_init+0x88>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040e:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |=  (2 << (4 * 4));   // AF2 = TIM3_CH1
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <pwm_init+0x88>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <pwm_init+0x88>)
 8000416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800041a:	6213      	str	r3, [r2, #32]

    TIM3->PSC     = 1599;   // Prescaler → 10kHz (16MHz / 1600)
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <pwm_init+0x8c>)
 800041e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000422:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR     = 100;    // Period → 0–100 for 1% resolution
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <pwm_init+0x8c>)
 8000426:	2264      	movs	r2, #100	@ 0x64
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR1    = 0;      // Start at 0% duty
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <pwm_init+0x8c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

    TIM3->CCMR1  |= (6 << 4) | TIM_CCMR1_OC1PE;
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <pwm_init+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a0c      	ldr	r2, [pc, #48]	@ (8000468 <pwm_init+0x8c>)
 8000436:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800043a:	6193      	str	r3, [r2, #24]
    TIM3->CCER   |= TIM_CCER_CC1E;
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <pwm_init+0x8c>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <pwm_init+0x8c>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6213      	str	r3, [r2, #32]
    TIM3->CR1    |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <pwm_init+0x8c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <pwm_init+0x8c>)
 800044e:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40023800 	.word	0x40023800
 8000464:	40020400 	.word	0x40020400
 8000468:	40000400 	.word	0x40000400

0800046c <set_pwm_duty>:

// Set PWM duty cycle (0–100)
void set_pwm_duty(uint8_t duty) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (duty > 100) duty = 100;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b64      	cmp	r3, #100	@ 0x64
 800047a:	d901      	bls.n	8000480 <set_pwm_duty+0x14>
 800047c:	2364      	movs	r3, #100	@ 0x64
 800047e:	71fb      	strb	r3, [r7, #7]
    TIM3->CCR1 = duty;
 8000480:	4a04      	ldr	r2, [pc, #16]	@ (8000494 <set_pwm_duty+0x28>)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40000400 	.word	0x40000400

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	@ (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f000 f811 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff fe9b 	bl	8000204 <main>

080004ce <LoopForever>:

LoopForever:
  b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004dc:	08000580 	.word	0x08000580
  ldr r2, =_sbss
 80004e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e4:	2000001c 	.word	0x2000001c

080004e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000524 <__libc_init_array+0x38>)
 80004f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000528 <__libc_init_array+0x3c>)
 80004f2:	1b64      	subs	r4, r4, r5
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	2600      	movs	r6, #0
 80004f8:	42a6      	cmp	r6, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	4d0b      	ldr	r5, [pc, #44]	@ (800052c <__libc_init_array+0x40>)
 80004fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000530 <__libc_init_array+0x44>)
 8000500:	f000 f818 	bl	8000534 <_init>
 8000504:	1b64      	subs	r4, r4, r5
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	2600      	movs	r6, #0
 800050a:	42a6      	cmp	r6, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f855 3b04 	ldr.w	r3, [r5], #4
 8000514:	4798      	blx	r3
 8000516:	3601      	adds	r6, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f855 3b04 	ldr.w	r3, [r5], #4
 800051e:	4798      	blx	r3
 8000520:	3601      	adds	r6, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	08000578 	.word	0x08000578
 8000528:	08000578 	.word	0x08000578
 800052c:	08000578 	.word	0x08000578
 8000530:	0800057c 	.word	0x0800057c

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
